#!/usr/bin/perl -w

#timeclock
#Copyright 2005-2010 Jason Burrell

#while this STARTED as an auto changed thing, it's quite a bit different now

######################################
# <boot> basic l'ane bootstrap stuff #
######################################
BEGIN {
    use FindBin;
    use File::Spec;
    $ENV{'LaneRoot'} = File::Spec->catdir($FindBin::Bin, File::Spec->updir, File::Spec->updir); #use the correct number of updirs
    require File::Spec->catfile($ENV{'LaneRoot'}, 'config', 'init.pl');
}

################################
# end-o-bootstrap stuff </boot>#
################################

#basic objects, LanePOS
use LanePOS::Locale;
use LanePOS::Clerk;
use LanePOS::SysString;
use LanePOS::Timeclock;
use Tk;

$lc = Locale->new;
$clerk = Clerk->new;
$sysStr = SysString->new;
$clock = Timeclock->new;
$amt = 0;
my %config = $sysStr->getTree('Lane/Timeclock');

#set some default values
$config->{'Lane/Timeclock/Run Once Pause Time'} = '1' if !exists $config->{'Lane/Timeclock/Run Once Pause Time'};
#reload the config on a SIGHUP
eval
{
    $SIG{'HUP'} = sub {
        warn "Lane/CORE/Reload Config: reload event\n" if exists $ENV{'LaneDebug'} and $ENV{'LaneDebug'} =~ /signals/;
        use File::Spec;
        require File::Spec->catfile($ENV{'LaneRoot'}, 'config', 'init.pl');
    }
};


&initDisplay;
&initIdleTasks;
$0 = 'Lane::Timeclock'; # modifies the "ps" info

$additionalText = '';

#this is the loop
do {
    my ($id) = getResponses('show', $additionalText . $lc->get('Enter your clerk ID'));
    my ($pass) = getResponses('hide', $lc->get('Enter your clerk Passcode'));
    if($clerk->open($id) and $clerk->authenticate($pass))
    {
	warn "timeclock: clerk passed authentication. Trying to punch in.\n" if exists $ENV{'LaneDebug'} and $ENV{'LaneDebug'} =~ /Timeclock/;
	if($clock->punch($clerk->{'id'}))
        {
            #we were successful
            if($clock->isClockedIn($clerk->{'id'}))
            {
                $message = $lc->get('Lane/Timeclock/Successful Clock In', $clerk->{'name'});
            }
            else
            {
                $message = $lc->get('Lane/Timeclock/Successful Clock Out', $clerk->{'name'}, $clock->getHoursInSpan($clerk->{'id'}, 'today', 'tomorrow'));
            }
            warn "timeclock: clerk message: $message\n" if exists $ENV{'LaneDebug'} and $ENV{'LaneDebug'} =~ /Timeclock/;
            infoPrint($message);
            &idleUpdate;
            if(exists $config->{'Lane/Timeclock/Chit'} and $config->{'Lane/Timeclock/Chit'})
            {
                my $chit = $config->{'Lane/Timeclock/Chit'};
                $chit =~ s/%%id%%/$clerk->{'id'}/g;
                use IO::File;
                my $p = IO::File->new;
                $p->open($config->{'Lane/Timeclock/Chit/Pipeline'}, '|-:raw') or warn "timeclock: couldn't open the chit pipeline\n";
                $p->print($chit) or warn "timeclock: couldn't print the chit\n";
            }
            $additionalText = '';
            sleep($config->{'Lane/Timeclock/Run Once Pause Time'});
            exit 1 if($#ARGV > -1 and $ARGV[0] eq '--run-once');
        }
        else
        {
            warn "timeclock: FAILED TO CLOCK IN!\n";
            $additionalText = $lc->get('Lane/Timeclock/Failed Clock') . "\n";
        }
    }
    else
    {
	warn "timeclock: clerk FAILED authentication\n" if exists $ENV{'LaneDebug'} and $ENV{'LaneDebug'} =~ /Timeclock/;
        $additionalText = $lc->get('Lane/Timeclock/Failed Clock') . "\n";
    }
} while (1);

exit 1;

###################################################
# Subroutines                                     #
###################################################
sub hideCursor
{
    my ($w) = @_;

    #check for the hide cursor setting, defaults to hidden
    if($sysStr->open('Lane/Register/UserInterface/HidePointer'))
    {
	return 1 if ! $sysStr->{'data'};
    }

    use File::Spec;
    my $common = File::Spec->catdir($ENV{'LaneRoot'}, 'register', 'common', 'x11');
    $w->configure(-cursor => ['@' . File::Spec->catfile($common, 'cursor.xbm'),
			      File::Spec->catfile($common, 'cursor.mask'),
			      'white', 'black']);
    return 1;
}

sub mkNumberKey
{
    my ($root, $key, $font, %opt) = @_;

    return $root->Button(
			 -activeforeground => $opt{'numfore'},
			 -activebackground => $opt{'numback'},
			 -background => $opt{'numback'},
			 -foreground => $opt{'numfore'},
			 -font => $font,
			 -height => '2',
			 -takefocus => '0',
			 -text => $key,
			 -width => '3',
			 -command => sub {
			     $ent .= $key;
			     $entEntry->icursor('end');
			 },);
}

# interface generated by SpecTcl (Perl enabled) version 1.1 
# from /burrell/developing/LanePOS/register/touch/ui.files/general-buttons-small.ui
# For use with Tk402.002, using the grid geometry manager
sub keypad
{
	my($root, $font, %opt) = @_;

	# widget creation 

	my($bClear) = $root->Button (
		-activeforeground => $opt{'clearfore'},
		-activebackground => $opt{'clearback'},
		-background => $opt{'clearback'},
		-foreground => $opt{'clearfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
#		-text => 'clear',
		-text => $lc->get('clear'),
		-width => '3',
		-command => sub {$ent = '';},
	);
	my($bSeven) = mkNumberKey($root, '7', $font, %opt);
	my($bEight) = mkNumberKey($root, '8', $font, %opt);
	my($bNine) = mkNumberKey($root, '9', $font, %opt);

	my($bQuit) = $root->Button (
		-activeforeground => $opt{'clearfore'},
		-activebackground => $opt{'clearback'},
		-background => $opt{'clearback'},
		-foreground => $opt{'clearfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => $lc->get('Lane/BackOffice/Buttons/Quit'),
		-width => '3',
				     -command => sub
				     {
					 exit 1;
				     },
	);

	my($bYes) = $root->Button (
		-activeforeground => $opt{'yesfore'},
		-activebackground => $opt{'yesback'},
		-background => $opt{'yesback'},
		-foreground => $opt{'yesfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => $lc->get('Yes'),
		-width => '3',
				     -command => sub
				     {
					 push @input, 'y';
					 $ent = "";
				     },
	);
	my($bMinus) = $root->Button (
		-activeforeground => $opt{'negfore'},
		-activebackground => $opt{'negback'},
		-background => $opt{'negback'},
		-foreground => $opt{'negfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => '-',
		-width => '3',
		-command => sub {
		    $ent .= '-';
		    $entEntry->icursor('end');
		},
	);

	my($bFour) = mkNumberKey($root, '4', $font, %opt);
	my($bFive) = mkNumberKey($root, '5', $font, %opt);
	my($bSix) = mkNumberKey($root, '6', $font, %opt);

	my($bNo) = $root->Button (
		-activeforeground => $opt{'nofore'},
		-activebackground => $opt{'noback'},
		-background => $opt{'noback'},
		-foreground => $opt{'nofore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
#		-text => 'No',
		-text => $lc->get('No'),
		-width => '3',
				     -command => sub
				     {
					 push @input, 'n';
					 $ent = "";
				     },
	);
	my($bQty) = $root->Button (
		-activeforeground => $opt{'qtyfore'},
		-activebackground => $opt{'qtyback'},
		-background => $opt{'qtyback'},
		-foreground => $opt{'qtyfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => 'X',
		-width => '3',
		-command => sub {
			    $qty = $ent;
			    $ent = "";		    
		},
	);
	my($bOne) = mkNumberKey($root, '1', $font, %opt);
	my($bTwo) = mkNumberKey($root, '2', $font, %opt);
	my($bThree) = mkNumberKey($root, '3', $font, %opt);

	my($bEnter) = $root->Button (
		-activeforeground => $opt{'enterfore'},
		-activebackground => $opt{'enterback'},
		-background => $opt{'enterback'},
		-foreground => $opt{'enterfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => $lc->get('Enter'),
		-width => '4',
				     -command => sub
				     {
					 push @input, $ent;
					 $ent = "";
				     },
				     );
	my($bBksp) = $root->Button (
		-activeforeground => $opt{'bkspfore'},
		-activebackground => $opt{'bkspback'},
		-background => $opt{'bkspback'},
		-foreground => $opt{'bkspfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => '<-',
		-width => '3',
		-command => sub {
		    $ent =~ s/.$//;
		    $entEntry->icursor('end');
		},
	);
	my($bZero) = mkNumberKey($root, '0', $font, %opt);
	my($bZeroZero) = mkNumberKey($root, '00', $font, %opt);

	# Geometry management

	$bClear->grid(
		      -in => $root,
		      -column => '1',
		      -row => '1'
		      );
	$bSeven->grid(
		-in => $root,
		-column => '2',
		-row => '1'
	);
	$bEight->grid(
		-in => $root,
		-column => '3',
		-row => '1'
	);
	$bNine->grid(
		-in => $root,
		-column => '4',
		-row => '1'
	);
	$bQuit->grid(
		-in => $root,
		-column => '5',
		-row => '1'
	);
#	$bYes->grid(
#		-in => $root,
#		-column => '5',
#		-row => '1'
#	);
#	$bMinus->grid(
#		-in => $root,
#		-column => '1',
#		-row => '2'
#	);
	$bFour->grid(
		-in => $root,
		-column => '2',
		-row => '2'
	);
	$bFive->grid(
		-in => $root,
		-column => '3',
		-row => '2'
	);
	$bSix->grid(
		-in => $root,
		-column => '4',
		-row => '2'
	);
#	$bNo->grid(
#		-in => $root,
#		-column => '5',
#		-row => '2'
#	);
#	$bQty->grid(
#		-in => $root,
#		-column => '1',
#		-row => '3'
#	);
	$bOne->grid(
		-in => $root,
		-column => '2',
		-row => '3'
	);
	$bTwo->grid(
		-in => $root,
		-column => '3',
		-row => '3'
	);
	$bThree->grid(
		-in => $root,
		-column => '4',
		-row => '3'
	);
	$bEnter->grid(
		-in => $root,
		-column => '5',
		-row => '3',
		-rowspan => '2',
		-sticky => 'nesw'
	);
	$bBksp->grid(
		-in => $root,
		-column => '1',
		-row => '4'
	);
	$bZero->grid(
		-in => $root,
		-column => '2',
		-row => '4',
		-columnspan => '2',
		-sticky => 'ew'
	);
	$bZeroZero->grid(
		-in => $root,
		-column => '4',
		-row => '4'
	);

	# Resize behavior management

	# container $root (rows)
	$root->gridRowconfigure(1, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(2, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(3, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(4, -weight  => 0, -minsize  => 30);

	# container $root (columns)
	$root->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(2, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(3, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(4, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(5, -weight => 0, -minsize => 30);

	# additional interface code

	# end additional interface code
}

sub initIdleTasks
{
    # builds the array of idle tasks, the pseudo-blocking
    # input loop calls idleUpdate periodically which calls
    # these subs
    
    @idleTasks = (
		  # must include at least one task
		  #&writeStatusBar; moved for events
		  sub {
		      #this gets called too fast, sleep a bit
		      select(undef, undef, undef, 0.05); #we need to make the time admin-definable
		      $entEntry->update;
		      
		  },
		  );
    return 1;
}

sub idleUpdate
{
    # calls all of the tasks in @idleTasks
    foreach my $i (@idleTasks)
    {
	&$i;
    }
    return 1;
}

sub initDisplay
{
    $top = MainWindow->new();
    hideCursor($top);
    $top->title('L\'ane: Timeclock');
    outerFramesUi($top);
    $entEntry->focus();
    $entEntry->update;
    return 1;
}

sub clearEntry
{
    $ent = "";
    return 1;
}

sub infoPrint
{
    # puts info (prompt string) into the info window
    my ($t) = @_;
    if(defined($txtInfo))
    {
	$txtInfo->delete('1.0', 'end');
	$txtInfo->insert('end', $t);
    }
    return 1;
}

sub getInputLine
{
    my ($open) = @_;
    $open = 1 if defined $open and $open =~ /open/i;
    #lock out the functions and menu items
    for(;;)
    {
	#let's try the sig handler here...
	#$reg->allowSignals();

	if($#input < 0)
	{
	    #wait, call a quick-to-return event handler here, like Tk->DoOneEvent or Tk->update
#	    $entEntry->DoOneEvent();
#	    $entEntry->update();
	    &idleUpdate;
	}
	else
	{
	    #let them be free...
	    return shift @input;
	}
    }
}

sub getResponses
{
    #the first thing is a "hidden" flag now
    my $hidden = 1 if shift =~ /hide/i;
    my @q = @_;
    my @r;
    my $c;

    #this input loop only understands clear(f5), bksp, and printable chars, the slash functions are put in place in the responses

    #hide if needed
    $entEntry->configure(-show => '*') if $hidden;
    for(my $i = 0; $i <= $#q; $i++)
    {
	infoPrint($q[$i]) if $q[$i] ne '';
	clearEntry();
	$r[$i] = getInputLine();
    }
    $entEntry->configure(-show => undef) if $hidden;
    return @r;
}

sub beep
{
    $entEntry->bell();
    return 1;
}

sub byeBye {
    exit 0;
}

sub outerFramesUi
{    my ($root) = @_;

    $txtInfo = $root->Text(-background => 'blue', -foreground => 'white', -selectbackground => 'blue', -selectforeground => 'white', -font => '-*-helvetica-bold-n-*-*-*-180-75-*-*-*-ISO8859-1', -height => '3', -width => '30', -wrap=> 'word', -takefocus => '0', -selectborderwidth => '0');
    hideCursor($txtInfo);
    $txtInfo->grid(-in => $root, -sticky => 'nsew', -column => '0', -row => '0', -columnspan => '1', -rowspan => '1');
    $entEntry = $root->Entry( -background => 'cyan', -foreground => 'black', -width => '20', -font => '-*-helvetica-bold-n-*-*-*-180-75-*-*-*-ISO8859-1', -justify => 'right', -textvariable => \$ent, -insertofftime => 0);
    hideCursor($entEntry);
    $entEntry->grid(-in => $root, -column => '0', -row => '1', -columnspan => '1', -rowspan => '1', -sticky => 'nsew');
    $entEntry->bind('<Return>', sub {push @input, $ent; $ent = '';});
    $entEntry->bind('<asterisk>', sub {$ent =~ s/\*//g; $qty = $ent; $ent = '';});
    $entEntry->bind('<at>', sub {$ent =~ s/@//g; $amt = $ent; $ent = '';});
    $entEntry->bind('<FocusOut>', sub {$entEntry->focus();});
    $frmKeypad = $root->Frame();
     $frmKeypad->grid(-column => '0', -row => '2', -columnspan => '1', -rowspan => '1');
    hideCursor($frmKeypad);
    keypad($frmKeypad, '-*-helvetica-bold-n-*-*-*-200-75-*-*-*-ISO8859-1', 'numback', 'grey', 'numfore', 'black', 'bkspback', 'yellow', 'enterback', 'orange', 'qtyfore', 'black', 'clearback', 'red', 'clearfore', 'white', 'nofore', 'white', 'bkspfore', 'black', 'yesfore', 'black', 'negfore', 'black', 'enterfore', 'white', 'yesback', 'green', 'qtyback', 'yellow', 'noback', 'red', 'negback', 'grey');
    1;
}

1;
#the end
