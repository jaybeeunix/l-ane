#!/usr/bin/perl -w

#renderXmlRegister-Tk

#Copyright 2003-2011 Jason Burrell
#This file is part of the L'ane suite,
#see COPYING

#this program "renders" a L'ane Register Interface XML file
#into a Perl/Tk program.

#usage: renderXmlRegister-Tk [inputfile.xml [outputprogram]]

#as this uses utf8

=pod

=head1 NAME

register/xmlRegister/renderXmlRegister-Tk - a Tk interface renderer for
L'E<acirc>ne's Register class.

=head1 SYNOPSIS

renderXmlRegister-Tk [input.xml [output.pl]]

=head1 DESCRIPTION

C<register> is a L<Tk|Tk> renderer for the XML-based front-ends to
L'E<acirc>ne's Register class.
While Tk supports both X11 and Win32 interfaces, (for the most part)
L'E<acirc>ne does not support Windows.

=head1 AUTHOR

Jason Burrell

=head1 BUGS

=over

=item *

The XML parser needs to be replaced with an L<XML::SAX> parser. bug 19

=back

=head1 SEE ALSO

L<LanePOS::Register>, L<Tk>

The L'E<acirc>ne Website http://l-ane.net/

=cut

require 5.008;

######################################
# <boot> basic l'ane bootstrap stuff #
######################################
BEGIN {
    use FindBin;
    use File::Spec;
    $ENV{'LaneRoot'} = File::Spec->catdir($FindBin::Bin, File::Spec->updir, File::Spec->updir); #use the correct number of updirs
    require File::Spec->catfile($ENV{'LaneRoot'}, 'config', 'init.pl');
}

use lib File::Spec->catdir($ENV{'LaneRoot'}, "LanePOS");
################################
# end-o-bootstrap stuff </boot>#
################################


package TkXp;
#we include the subclass here for ease of transport
#plus, it's really specific to this program
use pXMLp;
@ISA = ('pXMLp');

sub new
{
    my ($class) = @_;
    my $me = pXMLp->new();
    $me->{'tagStack'} = [];
    $me->{'currentText'} = '';
    $me->{'defaultFont'} = {};
    $me->{'currentFont'} = {};
    $me->{'sub-outerFramesUi'} = '';

    bless $me, $class;
    return $me;
}

sub startTag
{
    my ($me, $tag, %attr) = @_;

    push @{$me->{'tagStack'}}, $tag;

    #reset, as this is a new tag and we don't do mixed-mode
    $me->{'currentText'} = '';

    if($tag eq 'registerinterface')
    {
	#start processing

	#write the basic perl stuff
	print main::Prog "#!/usr/bin/perl -w\n\n#DO NOT EDIT THIS BY HAND!\n#THIS PROGRAM WAS AUTOMATICALLY GENERATED BY renderXmlRegister-Tk v$main::VERSION.\n\n#Generated: ", scalar(localtime), " (UTC)\n";
	#we have to wait until the <table> to generate the common stuff
	#in case the user has a <default>
    }
    elsif($tag eq 'default')
    {
	#this doesn't do anything by itself
	#but i put a section in for completeness
    }
    elsif($tag eq 'author')
    {
	print main::Prog "#The source XML file was created by: ";
	$me->{'_contact'} = $attr{'contact'} if exists $attr{'contact'};
    }
    elsif($tag eq 'creationtimestamp')
    {
	print main::Prog " on ";
    }
    elsif($tag eq 'font')
    {
	#the second element in tagStack should be "default",
	#if we are in the default tag
	#we should use grep() for safety though

	#tagStack[1] will always exist, since font isn't the xml root
	if($me->{'tagStack'}[1] eq 'default')
	{
	    #this is the default font
	    my ($k, $v);
	    $me->{'defaultFont'}{$k} = $v while ($k, $v) = each %attr;
	}
	else
	{
	    my ($k, $v);
	    #load it with the defaults
	    $me->{'currentFont'}{$_} = $me->{'defaultFont'}{$_} foreach (keys %{$me->{'defaultFont'}});
	    #this is the current font
	    $me->{'currentFont'}{$k} = $v while ($k, $v) = each %attr;
	}
    }
    elsif($tag eq 'table')
    {
	#now we can output the over-arching things

	#moved the bootstrap stuff to the end so emacs will be happy
	#and indent correctly
	my $boot; $boot .= $_ while(<main::DATA>);
	print main::Prog $boot;
	
	#check for the default attributes, 
	#as we don't read the dtd, we need to emulate it
	$attr{'width'} = 1 if ! exists($attr{'width'});
	$attr{'height'} = 1 if ! exists($attr{'height'});
	
	foreach my $w (1..$attr{'height'})
	{
	    my @row;
	    push @row, '0' foreach (1..$attr{'width'});
	    push @{$me->{'_usedcells'}}, \@row;
	}
	#although tk's grid manager knows about *spans,
	#we need to tell it where to start each element

	$me->{'sub-outerFramesUi'} = "sub outerFramesUi\n{    my (\$root) = \@_;\n\n";
    }
    elsif($tag eq 'cell')
    {
	$me->{'_cell'}{'columnspan'} = exists($attr{'columnspan'}) ? $attr{'columnspan'} : 1;
	$me->{'_cell'}{'rowspan'} = exists($attr{'rowspan'}) ? $attr{'rowspan'} : 1;
	#we'll call this here so we don't have to duplicate it in each element
	($me->{'_cell'}{'row'}, $me->{'_cell'}{'col'}) = $me->nextCell();
	$me->usedCells();
    }
    elsif($tag eq 'entry')
    {
	#set some defaults, if they aren't already set
	$attr{'forecolor'} = 'black' if ! exists $attr{'forecolor'};
	$attr{'backcolor'} = 'cyan' if ! exists $attr{'backcolor'};
	$attr{'width'} = 20 if ! exists $attr{'width'};
    }
    elsif($tag eq 'infobox')
    {
	$attr{'_width'} = 40;
	$attr{'_height'} = 6;
	$attr{'_fore'} = 'white';
	$attr{'_back'} = 'blue';
    }
    elsif($tag eq 'summarybox')
    {
	$attr{'_fore'} = 'white';
	$attr{'_back'} = 'blue';
	$attr{'_width'} = 30;
	$attr{'_height'} = 19;
    }
    elsif($tag eq 'receiptbox')
    {
	$attr{'_fore'} = 'black';
	$attr{'_back'} = 'white';
	$attr{'_width'} = 40;
	$attr{'_height'} = 22;
    }
    elsif($tag eq 'statusbar')
    {
	#set some defaults, if they aren't already set
	$attr{'forecolor'} = 'black' if ! exists $attr{'forecolor'};
	$attr{'backcolor'} = 'green' if ! exists $attr{'backcolor'};
    }
    elsif($tag eq 'tabpanel')
    {
	$attr{'forecolor'} = 'black' if ! exists $attr{'forecolor'};
	$attr{'backcolor'} = 'gray' if ! exists $attr{'backcolor'};
	$attr{'columns'} = 6 if ! exists $attr{'columns'};
	#exit 0;
    }
    elsif($tag eq 'keypad')
    {
	$attr{'numfore'} = 'black';
	$attr{'numback'} = 'grey';
	$attr{'yesfore'} = 'black';
	$attr{'yesback'} = 'green';
	$attr{'nofore'} = 'white';
	$attr{'noback'} = 'red';
	$attr{'clearfore'} = 'white';
	$attr{'clearback'} = 'red';
	$attr{'bkspfore'} = 'black';
	$attr{'bkspback'} = 'yellow';
	$attr{'qtyfore'} = 'black';
	$attr{'qtyback'} = 'yellow';
	$attr{'negfore'} = 'black';
	$attr{'negback'} = 'grey';
	$attr{'enterfore'} = 'white';
	$attr{'enterback'} = 'orange';
	#print STDERR "keypads aren't currently supported.\n";
	#exit 0;
    }
    elsif($tag eq 'image')
    {
	$attr{'id'} = '0' if ! exists $attr{'id'}; #image ids are actually cdata
    }
    if($tag ne 'font')
    {
	#don't save the font's attributes (this would override the parent's)
	$me->{'_attr'} = {};
	%{$me->{'_attr'}} = %attr;
    }
    
    1;
}

sub endTag
{
    my ($me, $tag) = @_;

    #we should be able to just pop a tag off, assuming the input file is well-formed
    pop @{$me->{'tagStack'}};
    #so we can use the main's attributes
    my %attr = %{$me->{'_attr'}};

    if($tag eq 'registerinterface')
    {
	#that's it, print the ending stuff
	print main::Prog "1;\n#the end\n";
    }
    elsif($tag eq 'default')
    {
	print main::Prog "\n\n";
	#clean up any of the global stuff
    }
    elsif($tag eq 'author')
    {
	print main::Prog " < " . $me->{'_contact'} . " >" if $me->{'_contact'};
    }
    elsif($tag eq 'font')
    {
	#tagStack[1] will always exist, since font isn't the xml root
	if($me->{'tagStack'}[1] eq 'default')
	{
 	    #this is the default font
	    $me->{'defaultFont'}{'family'} = $me->{'_fontfamily'};
	}
	else
	{
	    #this is the current font
	    $me->{'currentFont'}{'family'} = $me->{'_fontfamily'};
	    #reset the fontfamily to the default
	    $me->{'_fontfamily'} = $me->{'defaultFont'}{'family'};
	}
    }
    elsif($tag eq 'table')
    {
	$me->{'sub-outerFramesUi'} .= "    1;\n}\n\n";
	print main::Prog $me->{'sub-outerFramesUi'};
    }
    #we don't need an end cell
    elsif($tag eq 'entry')
    {
	#set some defaults, if they aren't already set
	my $font;
	$font = exists($me->{'currentFont'}{'family'}) ? $me->{'currentFont'} : $me->{'defaultFont'};
	$font = $me->fontStr($font);
	$me->{'sub-outerFramesUi'} .= '    $entEntry = $root->Entry( -background => \'' . $attr{'backcolor'} . '\', -foreground => \'' . $attr{'forecolor'} . '\', -width => \'' . $attr{'width'} . '\', -font => \'' . $font . '\', -justify => \'right\', -textvariable => \$ent, -insertofftime => 0);' . "\n    hideCursor(\$entEntry);\n    \$entEntry->grid(-in => \$root, -column => '" . $me->{'_cell'}{'col'} . "', -row => '" . $me->{'_cell'}{'row'} . "', -columnspan => '" . $me->{'_cell'}{'columnspan'} . "', -rowspan => '" . $me->{'_cell'}{'rowspan'} . "', -sticky => 'nsew');\n    \$entEntry->bind('<Return>', sub {push \@input, \$ent; \$ent = '';});
    \$entEntry->bind('<FocusOut>', sub {\$entEntry->focus();});\n";
    }
    elsif($tag eq 'infobox')
    {
	$me->{'sub-outerFramesUi'} .= $me->makeTxtElement('Info', 'word', %attr);
    }
    elsif($tag eq 'summarybox')
    {
	$me->{'sub-outerFramesUi'} .= $me->makeTxtElement('Summary', 'char', %attr);
    }
    elsif($tag eq 'receiptbox')
    {
	$me->{'sub-outerFramesUi'} .= $me->makeTxtElement('Receipt', 'char', %attr, 'fixedWidth', '1');
    }
    elsif($tag eq 'keypad')
    {
	#set some defaults, if they aren't already set
	my $font;
	$font = exists($me->{'currentFont'}{'family'}) ? $me->{'currentFont'} : $me->{'defaultFont'};
	$font = $me->fontStr($font);
	$me->{'sub-outerFramesUi'} .= '    $frmKeypad = $root->Frame();' . "\n" . '     $frmKeypad->grid(-column => \'' . $me->{'_cell'}{'col'} . '\', -row => \'' . $me->{'_cell'}{'row'} . '\', -columnspan => \'' . $me->{'_cell'}{'columnspan'} . '\', -rowspan => \'' . $me->{'_cell'}{'rowspan'} . '\');' . "\n    hideCursor(\$frmKeypad);\n    keypad(\$frmKeypad, '$font', '" . join('\', \'', %attr) . "');\n";
    }
    elsif($tag eq 'tabpanel')
    {
	#set some defaults, if they aren't already set
	my $font;
	$font = exists($me->{'currentFont'}{'family'}) ? $me->{'currentFont'} : $me->{'defaultFont'};
	$font = $me->fontStr($font);
	$me->{'sub-outerFramesUi'} .= '    use Tk::NoteBook;
    $notebook = $root->NoteBook(-font => \'' . $font . '\', -foreground => \'' . $attr{'forecolor'} . '\', -background => \'' . $attr{'backcolor'} . '\');
    $notebook->grid(-column => \'' . $me->{'_cell'}{'col'} . '\', -row => \'' . $me->{'_cell'}{'row'} . '\', -columnspan => \'' . $me->{'_cell'}{'columnspan'} . '\', -rowspan => \'' . $me->{'_cell'}{'rowspan'} . '\', -sticky => \'nsew\');'
	. "\n    hideCursor(\$notebook);\n    \$notebook->add('Lock', -raisecmd => sub {\$notebook->raise('Func');},);\n    buildFuncPage(\$notebook, '$font', $attr{'columns'});\n    buildMenu(\$notebook, '$font', $attr{'columns'});\n" ;
    }
    elsif($tag eq 'statusbar')
    {
	#set some defaults, if they aren't already set
	my $font;
	$font = exists($me->{'currentFont'}{'family'}) ? $me->{'currentFont'} : $me->{'defaultFont'};
	$font = $me->fontStr($font);
	$me->{'sub-outerFramesUi'} .= 	    '    $lblStatusBar = $root->Label( -background => \'' . $attr{'backcolor'} . '\', -foreground => \'' . $attr{'forecolor'} . '\', -font => \'' . $font . '\', -anchor => \'e\', -textvariable => \$statusBar, -relief => \'ridge\');' .
	    "\n" . '    $lblStatusBar->grid(-in => $root, -column => \'' . $me->{'_cell'}{'col'} . '\', -row => \'' . $me->{'_cell'}{'row'} . '\', -columnspan => \'' . $me->{'_cell'}{'columnspan'} . '\', -rowspan => \'' . $me->{'_cell'}{'rowspan'} . '\', -sticky => \'nsew\');' . "\n    hideCursor(\$lblStatusBar);\n";
    }
    elsif($tag eq 'image')
    {
	$me->{'sub-outerFramesUi'} .= '

    #this is an image
    $reg->{\'ui\'}{\'image\'}{\'' . $attr{'id'} . '\'} = $root->Frame();' . "\n" . '    $reg->{\'ui\'}{\'image\'}{\'' . $attr{'id'} . '\'}->grid(-sticky => \'nsew\', -column => \'' . $me->{'_cell'}{'col'} . '\', -row => \'' . $me->{'_cell'}{'row'} . '\', -columnspan => \'' . $me->{'_cell'}{'columnspan'} . '\', -rowspan => \'' . $me->{'_cell'}{'rowspan'} . '\');' . '
    hideCursor($reg->{\'ui\'}{\'image\'}{\'' . $attr{'id'} . '\'});

    ';
    }
    #reset the current font
    $me->{'currentFont'} = {} if $tag ne 'font';
    1;
}

sub text
{
    #text contains the author, creationtimestamp, and most importantly, fontfamily
    my ($me, $t) = @_;

    return 1 if $t =~ /^\s+$/s;

    if($me->{'tagStack'}[-1] eq 'author' or $me->{'tagStack'}[-1] eq 'creationtimestamp')
    {
	print main::Prog "$t";
    }
    elsif($me->{'tagStack'}[-1] eq 'font')
    {
	$me->{'_fontfamily'} = $t;
    }
    1;
}

sub fontStr
{
    my ($me, $f) = @_;
    my %a = %{$f};

    #return an XLFD: -*-Helvetica-Bold-R-Normal-*-*-180-100-*-*-*-iso8859-15
    #i was planning on using $top->fontCreate(), but then i loose the ability to set the encoding
    my $xlfd = '-*-<family>-<weight>-<slant>-*-*-*-<size>-<resolution>-*-*-*-<encoding>';

    #family
    if(exists $me->{'currentFont'}{'family'})
    {
	$a{'family'} = $me->{'currentFont'}{'family'};
    }
    elsif(exists $me->{'defaultFont'}{'family'})
    {
	$a{'family'} = $me->{'defaultFont'}{'family'};
    }
    else
    {
	#fixed is fairly safe
	$a{'family'} = 'fixed';
    }

    #encoding
    if(exists $me->{'currentFont'}{'encoding'})
    {
	$a{'encoding'} = $me->{'currentFont'}{'encoding'};
    }
    elsif(exists $me->{'defaultFont'}{'encoding'})
    {
	$a{'encoding'} = $me->{'defaultFont'}{'encoding'};
    }
    else
    {
	#we need to emulate the dtd
	$a{'encoding'} = 'ISO8859-1';
    }

    #resolution
    if(exists $me->{'currentFont'}{'resolution'})
    {
	$a{'resolution'} = $me->{'currentFont'}{'resolution'};
    }
    elsif(exists $me->{'defaultFont'}{'resolution'})
    {
	$a{'resolution'} = $me->{'defaultFont'}{'resolution'};
    }
    else
    {
	#we need to emulate the dtd
	$a{'resolution'} = '75';
    }

    #slant
    if(exists $me->{'currentFont'}{'slant'})
    {
	$a{'slant'} = $me->{'currentFont'}{'slant'};
    }
    elsif(exists $me->{'defaultFont'}{'slant'})
    {
	$a{'slant'} = $me->{'defaultFont'}{'slant'};
    }
    else
    {
	#we need to emulate the dtd
	$a{'slant'} = 'normal';
    }
    #convert to x style one chars
    $a{'slant'} =~ s/^(.)(.)*/$1/;

    #weight
    if(exists $me->{'currentFont'}{'weight'})
    {
	$a{'weight'} = $me->{'currentFont'}{'weight'};
    }
    elsif(exists $me->{'defaultFont'}{'weight'})
    {
	$a{'weight'} = $me->{'defaultFont'}{'weight'};
    }
    else
    {
	#we need to emulate the dtd
	$a{'weight'} = 'regular';
    }

    #size
    if(exists $me->{'currentFont'}{'size'})
    {
	$a{'size'} = $me->{'currentFont'}{'size'};
    }
    elsif(exists $me->{'defaultFont'}{'size'})
    {
	$a{'size'} = $me->{'defaultFont'}{'size'};
    }
    else
    {
	#we need to emulate the dtd
	$a{'size'} = '12';
    }
    #scale the font to x's decipoints
    $a{'size'} *= 10;

    #now, put it into the xlfd
    #$xlfd =~ s/<$_>/$a{$_}/ while (keys(%a));
    my ($k, $v);
    $xlfd =~ s/<$k>/$v/ while (($k, $v) = each(%a));

    return $xlfd;
}

sub makeTxtElement
{
    my ($me, $name, $wrap, %attr) = @_;
    
    #set some defaults, if they aren't already set
    $attr{'forecolor'} = $attr{'_fore'} if ! exists $attr{'forecolor'};
    $attr{'backcolor'} = $attr{'_back'} if ! exists $attr{'backcolor'};
    $attr{'width'} = $attr{'_width'} if ! exists $attr{'width'};
    $attr{'height'} = $attr{'_height'} if ! exists $attr{'height'};
    my $font = exists($me->{'currentFont'}{'family'}) ? $me->{'currentFont'} : $me->{'defaultFont'};
    $font = $me->fontStr($font);
    return '    $txt' . $name . ' = $root->Text(-background => \'' . $attr{'backcolor'} . '\', -foreground => \'' . $attr{'forecolor'} . '\', -selectbackground => \'' . $attr{'backcolor'} . '\', -selectforeground => \'' . $attr{'forecolor'} . '\', -font => \'' . $font . '\', -height => \'' . $attr{'height'} . '\', -width => \'' . $attr{'width'} . '\', -wrap=> \'' . $wrap . '\', -takefocus => \'0\', -selectborderwidth => \'0\');' . "\n    hideCursor(\$txt$name);\n    \$txt" . $name . "->grid(-in => \$root, -sticky => 'ns" . ($attr{'fixedWidth'} ? '' : 'ew') . "', -column => '" . $me->{'_cell'}{'col'} . "', -row => '" . $me->{'_cell'}{'row'} . "', -columnspan => '" . $me->{'_cell'}{'columnspan'} . "', -rowspan => '" . $me->{'_cell'}{'rowspan'} . "');\n";

   1;
}

sub nextCell
{
    #returns a two element list (row, col) of the next free cell,
    #starting w/0,0, moving across, then down (like reading in European langs)
    my ($me) = @_;

    my ($x, $y);

  OUTTER: for($x = 0; $x <= $#{$me->{'_usedcells'}}; $x++)
	  {
	      for($y = 0; $y <= $#{$me->{'_usedcells'}[$x]}; $y++)
	      {
		  last OUTTER if $me->{'_usedcells'}[$x][$y] == 0;
	      }
	  }
    return ($x, $y);
}

sub usedCells
{
    #marks cells as used
    my ($me) = @_;

    my ($x, $y) = ($me->{'_cell'}{'row'}, $me->{'_cell'}{'col'});

    for(; $x < $me->{'_cell'}{'row'} + $me->{'_cell'}{'rowspan'}; $x++)
    {
	foreach my $c (@{$me->{'_usedcells'}[$x]}[$y ... $y + $me->{'_cell'}{'columnspan'} - 1])
	{
	    $c = 1;
	}
    }

    return 1;
}

sub printUsed
{
    my ($me, $cells) = @_;
    my $rtn = "\nv=====\n";
    foreach my $r (@{$cells})
    {
	foreach my $c (@$r)
	{
	    $rtn .= "$c";
	}
	$rtn .= "\n";
    }
    $rtn .= "^=====\n";
    return $rtn;
}

sub processingDirective
{
    #ignore pds
    1;
}

sub comment
{
    #ignore comments
    1;
}

1;

#################################################
# this is the actual program                    #
#################################################
package main;

$main::VERSION = (q$Revision: 1224 $ =~ /(\d+)/)[0];

#defaults so stdin/stdout
*Xml = *STDIN;
*Prog = *STDOUT;

if($#ARGV >= 0)
{
    open Xml, "<$ARGV[0]" or die "couldn't open the input file $ARGV[0]";
    if($#ARGV == 1)
    {
	open Prog, ">$ARGV[1]" or die "couldn't open the output file $ARGV[1]";
    }
}

#read the input file
my $xml;
$xml .= $_ while(<Xml>);

my $tkxp = TkXp->new();
$tkxp->parse($xml);
#the parser's methods actually do all of the work
1;
__END__
######################################
# <boot> basic l'ane bootstrap stuff #
######################################
BEGIN {
    use FindBin;
    use File::Spec;
    $ENV{'LaneRoot'} = File::Spec->catdir($FindBin::Bin, File::Spec->updir, File::Spec->updir) if !exists $ENV{'LaneRoot'}; #use the correct number of updirs
    require File::Spec->catfile($ENV{'LaneRoot'}, 'config', 'init.pl');
}

################################
# end-o-bootstrap stuff </boot>#
################################

my @idleTasks;

#basic objects, LanePOS
use LanePOS::Register;

use Tk;

$reg = Register->new;
&copyright;
$reg->preregisterEvent('Lane/CORE/Initialize/User Interface', \&initDisplay);
initEvents($reg);
$reg->triggerEvent('Lane/CORE/Initialize/User Interface');
&initIdleTasks;
$0 = "register (XmlRegister-Tk) (Register " . $reg->{'version'} . ")"; # modifies the "ps" info
$reg->preregisterEvent('Lane/Register/UserInterface/Unlock', sub{
    if(defined($main::notebook))
    {
	#this undoes lockInterface
	#$main::notebook;
	$main::notebook->pageconfigure('Lock', -raisecmd => sub {$main::notebook->raise('Func');});
	foreach my $p (@main::notebookPages)
	{
	    $main::notebook->pageconfigure($p, -state => 'normal');
	}
	$main::notebookCurrent = 'Func' if ! $main::reg->{'Lane/Register/UserInterface/NB/Return'};
	$main::notebook->raise($main::notebookCurrent);
    }
});
$reg->preregisterEvent('Lane/Register/UserInterface/Lock', sub{
    if(defined($main::notebook))
    {
	#save the current page
	$main::notebookCurrent = $main::notebook->raised;
	#this locks out some of the functions while requesting input from the user
	$main::notebook->pageconfigure('Lock', -raisecmd => sub {});
	$main::notebook->raise('Lock');
	foreach my $p (@main::notebookPages)
	{
	    $main::notebook->pageconfigure($p, -state => 'disabled');
	}
    }});
$reg->newTranz('first');

#infoPrint('Enter a product ID, or press a function key');
&mainInputLoop;
#make sure we correctly cancel the sale
$reg->{'signals'}{'dieWhenConvient'} = 1;
$reg->allowSignals;

###################################################
# Subroutines                                     #
###################################################
sub mapKey
{
    my ($k, $f) = @_;

    return 1 if(!defined($entEntry));

    if($f eq 'clear')
    {
	#i hate special cases
	$entEntry->bind("<$k>", sub { $ent = '';});
    }
    elsif($f eq 'zeroZero')
    {
	#i hate special cases
	$entEntry->bind("<$k>", sub { $ent .= '00'; $entEntry->icursor('end');});
    }
    elsif($f =~ /^plu(.+)$/)
    {
	my $plu = $1;
	$entEntry->bind("<$k>", sub {
	    $entEntry->eventGenerate('<at>');
	    $ent = $plu;
	    $entEntry->eventGenerate('<Return>');
	    1;
	});
    }
    elsif($f eq 'void')
    {
	$entEntry->bind("<$k>", sub
			{
			    $ent = "-1";
			    $entEntry->eventGenerate('<asterisk>');
			});
    }
    elsif($f eq 'asterisk')
    {
	$entEntry->bind("<$k>", sub
			{
			    $entEntry->eventGenerate('<asterisk>');
			});
    }
    elsif($f eq 'return')
    {
	$entEntry->bind("<$k>", sub
			{
			    $entEntry->eventGenerate('<Return>');
			});
    }
    elsif($f =~ /^(yes|no)$/)
    {
	my $v = substr($1, 0, 1);
	$entEntry->bind("<$k>", sub
			{
			    push @input, $v;
			    $ent = "";
			});
    }
    elsif($f =~ /^\d$/)
    {
	my $v = $f;
	$entEntry->bind("<$k>", sub
			{
			    $ent .= $f;
			    $entEntry->icursor('end');
			});
    }
    else
    {
	$entEntry->bind("<$k>", sub {
	    $ent .= "/$f";
	    $entEntry->eventGenerate('<Return>');
	});
    }
    #unbind the defaults
    $entEntry->Tk::bind('Tk::Entry', "<$k>", sub{1;});
    return 1;
}

sub hideCursor
{
    my ($w) = @_;

    #check for the hide cursor setting, defaults to hidden
    if($main::reg->{'sysStr'}->open('Lane/Register/UserInterface/HidePointer'))
    {
	return 1 if ! $main::reg->{'sysStr'}{'data'};
    }

    use File::Spec;
    my $common = File::Spec->catdir($ENV{'LaneRoot'}, 'register', 'common', 'x11');
    $w->configure(-cursor => ['@' . File::Spec->catfile($common, 'cursor.xbm'),
			      File::Spec->catfile($common, 'cursor.mask'),
			      'white', 'black']);
    return 1;
}

sub lockInterface
{
    return $main::reg->triggerEvent('Lane/Register/UserInterface/Lock');
}

sub unlockInterface
{
    return $main::reg->triggerEvent('Lane/Register/UserInterface/Unlock');
}

sub buildFuncPage
{
    my ($notebook, $font, $cols) = @_;
    #this opens the database, reads the menu description file, and builds the menu
    
    use LanePOS::SysString;
    my $str = SysString->new;
    #get the description from the database
    if($str->open('register-touch-functionpagesetup'))
    {
	print STDERR "$0 loaded the register-touch-functionpagesetup from the database\n";
    }
    else
    {
	print STDERR "ERROR! $0 couldn't load the register-touch-functionpagesetup from the database\n";
    }
    
    my $curTab = $notebook->add('Func', -label => 'Functions');
    push @notebookPages, 'Func';
    
    my @l = split /\n/, $str->{'data'};
    my ($row, $col) = (0, 0);
  PAGE: for(my $i = 0; $i <= $#l; $i++)
	    {
		if($l[$i] =~ /^page/i)
		{
		    $i++ if $i < $#l; #sanity check (don't need to hop out, the following won't match and will throw us out)
		  ITEM: for(; $i <= $#l; $i++) #process items until we get to another page
			    {
				if($l[$i] =~ /^(item)(\s*=\s*)(.*)/i)
				{
				    #this is a new item
				    my $item = $3;
				    $item =~ s/\\n/\n/g;
				    my ($fore, $back, $cmd) = ('black', 'grey', '');
				    $i++ if $i < $#l; #sanity check (don't need to hop out, the following won't match and will throw us out)
				    for(; $i <= $#l; $i++) #process the item parts until we hit the next item
					{
					    if($l[$i] =~ /^(foreground)(\s*=\s*)(.*)/i)
					    {
						$fore = $3;
					    }
					    elsif($l[$i] =~ /^(background)(\s*=\s*)(.*)/i)
					    {
						$back = $3;
					    }
					    elsif($l[$i] =~ /^(command)(\s*=\s*)(.*)/i)
					    {
						$cmd = $3;
					    }
					    else
					    {
						#build this item
						$curTab->Button(
								-activebackground => $back,
								-activeforeground => $fore,
								-background => $back,
								-font => $font,
								-foreground => $fore,
								-height => '4',
								-takefocus => '0',
								-text => $item,
								-width => '7',				    
								-command => sub {
								    my $amt = $ent;
								    $ent = '';
								    eval "$cmd";
								},
								)->grid(
									-in => $curTab,
									-column => $col,
									-row => $row
									);
						$col++;
						$row++ if $col >= $cols;
						$col %= $cols;
						
						$i--;
						next ITEM;
					    }
					}
				    }
				    else
				    {
					$i--;
					next PAGE;
				    }
				}
			    }
			}
#    #put the summary information here
#    $txtSummary  = $curTab->Text (
#		-background => 'blue',
#		-font => '-*-Courier-Bold-R-Normal-*-*-140-*-*-*-*-*-15',
#		-foreground => 'white',
#		-height => '10',
#		-takefocus => '0',
#		-selectborderwidth => '0',
#		-selectbackground => 'blue',
#		-selectforeground => 'white',
#		-width => '40',
#				  )->grid(
#					  -in => $curTab,
#					  -column => 0,
#					  -row => $row + 1,
#					  -columnspan => 6,
#					  );
#    hideCursor($txtSummary);
		    return 1;
		}

sub buildMenu
{
    my ($notebook, $font, $cols) = @_;
    #this opens the database, reads the menu description file, and builds the menu

    use LanePOS::String;
    my $str = String->new;
    #get the description from the database
    if($str->open('register-touch-menusetup'))
    {
	print STDERR "$0 loaded the register-touch-menusetup from the database\n";
    }
    else
    {
	print STDERR "ERROR! $0 couldn't load the register-touch-menusetup from the database\n";
    }
    
    my ($title);

    my @l = split /\n/, $str->{'data'};
  PAGE: for(my $i = 0; $i <= $#l; $i++)
    {
	if($l[$i] =~ /^page/i)
	{
	    #this is a new page
	    $l[$i] =~ /(page)(\s*=\s*)(.*)/i;
	    $title = $3;
	    my $curTab = $notebook->add($title, -label => $title);
	    push @notebookPages, $title;
	    my ($row, $col) = (0, 0);
	    $i++ if $i < $#l; #sanity check (don't need to hop out, the following won't match and will throw us out)
	  ITEM: for(; $i <= $#l; $i++) #process items until we get to another page
	    {
		if($l[$i] =~ /^(item)(\s*=\s*)(.*)/i)
		{
		    #this is a new item
		    my $item = $3;
		    $item =~ s/\\n/\n/g;
		    my ($fore, $back, $plu) = ('black', 'grey', '');
		    $i++ if $i < $#l; #sanity check (don't need to hop out, the following won't match and will throw us out)
		    for(; $i <= $#l; $i++) #process the item parts until we hit the next item
		    {
			if($l[$i] =~ /^(foreground)(\s*=\s*)(.*)/i)
			{
			    $fore = $3;
			}
			elsif($l[$i] =~ /^(background)(\s*=\s*)(.*)/i)
			{
			    $back = $3;
			}
			elsif($l[$i] =~ /^(plu)(\s*=\s*)(.*)/i)
			{
			    $plu = $3;
			}
			else
			{
			    #build this item
			    $curTab->Button(
					    -activebackground => $back,
					    -activeforeground => $fore,
					    -background => $back,
					    -font => $font,
					    -foreground => $fore,
					    -height => '4',
					    -takefocus => '0',
					    -text => $item,
					    -width => '7',				    
					    -command => sub {
						my $amt = $ent;
						$ent = '';
						#changed for console to allow direct multiplication
						$reg->itemProcess($qty, $amt, $plu);
						push @input, '';
						$qty = 1; #reset the used qty
					    },
					    )->grid(
						    -in => $curTab,
						    -column => $col,
						    -row => $row
						    );
			    $col++;
			    $row++ if $col >= $cols;
			    $col %= $cols;

			    $i--;
			    next ITEM;
			}
		    }
		}
		else
		{
		    $i--;
		    next PAGE;
		}
	    }
	}
    }
    return 1;
	}

sub mkNumberKey
{
    my ($root, $key, $font, %opt) = @_;

    return $root->Button(
			 -activeforeground => $opt{'numfore'},
			 -activebackground => $opt{'numback'},
			 -background => $opt{'numback'},
			 -foreground => $opt{'numfore'},
			 -font => $font,
			 -height => '2',
			 -takefocus => '0',
			 -text => $key,
			 -width => '3',
			 -command => sub {
			     #$ent .= $key;
			     #$entEntry->icursor('end');
			     $entEntry->insert('insert', $key);
			 },);
}

# interface generated by SpecTcl (Perl enabled) version 1.1 
# from /burrell/developing/LanePOS/register/touch/ui.files/general-buttons-small.ui
# For use with Tk402.002, using the grid geometry manager
sub keypad
{
	my($root, $font, %opt) = @_;

	# widget creation 

	my($bClear) = $root->Button (
		-activeforeground => $opt{'clearfore'},
		-activebackground => $opt{'clearback'},
		-background => $opt{'clearback'},
		-foreground => $opt{'clearfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => $reg->{'lc'}->get('clear'),
		-width => '3',
		-command => sub {$ent = '';},
	);
	my($bSeven) = mkNumberKey($root, '7', $font, %opt);
	my($bEight) = mkNumberKey($root, '8', $font, %opt);
	my($bNine) = mkNumberKey($root, '9', $font, %opt);

	my($bYes) = $root->Button (
		-activeforeground => $opt{'yesfore'},
		-activebackground => $opt{'yesback'},
		-background => $opt{'yesback'},
		-foreground => $opt{'yesfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => $reg->{'lc'}->get('Yes'),
		-width => '3',
				     -command => sub
				     {
					 push @input, 'y';
					 $ent = "";
				     },
	);
	my($bMinus) = $root->Button (
		-activeforeground => $opt{'negfore'},
		-activebackground => $opt{'negback'},
		-background => $opt{'negback'},
		-foreground => $opt{'negfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => '-',
		-width => '3',
		-command => sub {
		    $entEntry->insert('insert', '-');
		},
	);

	my($bFour) = mkNumberKey($root, '4', $font, %opt);
	my($bFive) = mkNumberKey($root, '5', $font, %opt);
	my($bSix) = mkNumberKey($root, '6', $font, %opt);

	my($bNo) = $root->Button (
		-activeforeground => $opt{'nofore'},
		-activebackground => $opt{'noback'},
		-background => $opt{'noback'},
		-foreground => $opt{'nofore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => $reg->{'lc'}->get('No'),
		-width => '3',
				     -command => sub
				     {
					 push @input, 'n';
					 $ent = "";
				     },
	);
	my($bQty) = $root->Button (
		-activeforeground => $opt{'qtyfore'},
		-activebackground => $opt{'qtyback'},
		-background => $opt{'qtyback'},
		-foreground => $opt{'qtyfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => 'X',
		-width => '3',
		-command => sub {
			    $qty = $ent;
			    $ent = '';
			},
	);
	my($bOne) = mkNumberKey($root, '1', $font, %opt);
	my($bTwo) = mkNumberKey($root, '2', $font, %opt);
	my($bThree) = mkNumberKey($root, '3', $font, %opt);

	my($bEnter) = $root->Button (
		-activeforeground => $opt{'enterfore'},
		-activebackground => $opt{'enterback'},
		-background => $opt{'enterback'},
		-foreground => $opt{'enterfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => $reg->{'lc'}->get('Enter'),
		-width => '4',
				     -command => sub
				     {
					 push @input, $ent;
					 $ent = "";
				     },
				     );
	my($bBksp) = $root->Button (
		-activeforeground => $opt{'bkspfore'},
		-activebackground => $opt{'bkspback'},
		-background => $opt{'bkspback'},
		-foreground => $opt{'bkspfore'},
		-font => $font,
		-height => '2',
		-takefocus => '0',
		-text => '<-',
		-width => '3',
		-command => sub {
		    my $c = $entEntry->index('insert');
		    $entEntry->delete($c-1) if $c > 0;
		},
	);
	my($bZero) = mkNumberKey($root, '0', $font, %opt);
	my($bZeroZero) = mkNumberKey($root, '00', $font, %opt);

	# Geometry management

	$bClear->grid(
		      -in => $root,
		      -column => '1',
		      -row => '1'
		      );
	$bSeven->grid(
		-in => $root,
		-column => '2',
		-row => '1'
	);
	$bEight->grid(
		-in => $root,
		-column => '3',
		-row => '1'
	);
	$bNine->grid(
		-in => $root,
		-column => '4',
		-row => '1'
	);
	$bYes->grid(
		-in => $root,
		-column => '5',
		-row => '1'
	) unless exists $opt{'noYes'};
	$bMinus->grid(
		-in => $root,
		-column => '1',
		-row => '2'
	) unless exists $opt{'noMinus'};
	$bFour->grid(
		-in => $root,
		-column => '2',
		-row => '2'
	);
	$bFive->grid(
		-in => $root,
		-column => '3',
		-row => '2'
	);
	$bSix->grid(
		-in => $root,
		-column => '4',
		-row => '2'
	);
	$bNo->grid(
		-in => $root,
		-column => '5',
		-row => '2'
	) unless exists $opt{'noNo'};
	$bQty->grid(
		-in => $root,
		-column => '1',
		-row => '3'
	) unless exists $opt{'noQty'};
	$bOne->grid(
		-in => $root,
		-column => '2',
		-row => '3'
	);
	$bTwo->grid(
		-in => $root,
		-column => '3',
		-row => '3'
	);
	$bThree->grid(
		-in => $root,
		-column => '4',
		-row => '3'
	);
	$bEnter->grid(
		-in => $root,
		-column => '5',
		-row => '3',
		-rowspan => '2',
		-sticky => 'nesw'
	) unless exists $opt{'noEnter'};
	$bBksp->grid(
		-in => $root,
		-column => '1',
		-row => '4'
	) unless exists $opt{'noBksp'};
	$bZero->grid(
		-in => $root,
		-column => '2',
		-row => '4',
		-columnspan => '2',
		-sticky => 'ew'
	);
	$bZeroZero->grid(
		-in => $root,
		-column => '4',
		-row => '4'
	) unless exists $opt{'noZeroZero'};

	# Resize behavior management

	# container $root (rows)
	$root->gridRowconfigure(1, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(2, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(3, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(4, -weight  => 0, -minsize  => 30);

	# container $root (columns)
	$root->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(2, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(3, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(4, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(5, -weight => 0, -minsize => 30);

	# additional interface code

	# end additional interface code
}

sub copyright
{
    print "L'ane (Register v", $reg->{'version'}, "), Copyright 2002-2011 Jason B. Burrell. Portions Copyright 2000-2002 Burrell Business Systems.

Lane comes with ABSOLUTELY NO WARRANTY; for details see the file
COPYING. This is free software, and you are welcome to redistribute
it under certain conditions; see the file COPYING for details.

http://l-ane.net/
http://ryotous.com/

Using: $ENV{'LaneDSN'}

This is a generated registerTk front end to the Register class.
";
#    sleep 2;
    return 1;
}

sub initIdleTasks
{
    # builds the array of idle tasks, the pseudo-blocking
    # input loop calls idleUpdate periodically which calls
    # these subs
    
    @idleTasks = (
		  # must include at least one task
		  #&writeStatusBar; moved for events
		  sub {
		      #this gets called too fast, sleep a bit
		      select(undef, undef, undef, 0.05); #we need to make the time admin-definable
		      $entEntry->update;
		      
		  },
		  );
    return 1;
}

sub idleUpdate
{
    # calls all of the tasks in @idleTasks
    foreach my $i (@idleTasks)
    {
	&$i;
    }
    return 1;
}

sub initEvents
{
    my ($reg) = @_;

    #remove the empty events from these things
    foreach my $e
	(
	 'Lane/Register/UserInterface/Update Status Bar',
	 'Lane/Register/UserInterface/Update Summary Area',
	 'Lane/Register/UserInterface/Clear Summary Area',
	 'Lane/Register/UserInterface/Beep',
	 'Lane/Register/UserInterface/Clear Entry',
	 'Lane/Register/UserInterface/Print Info',
	 'Lane/Register/UserInterface/Get Responses',
	 'Lane/Register/UserInterface/Print Receipt',
	 'Lane/Register/UserInterface/Clear Receipt',
	 'Lane/Register/UserInterface/Map Key',
	 'Lane/Register/UserInterface/Exit',
	)
    {
	pop @{$reg->{'events'}->{$e}};
    }

    $reg->registerEvent('Lane/Register/UserInterface/Print Info', \&main::infoPrint);
    $reg->registerEvent('Lane/Register/UserInterface/Get Responses', \&main::getResponses);
    $reg->registerEvent('Lane/Register/UserInterface/Exit', sub {;});

    $reg->registerEvent('Lane/Register/UserInterface/Update Status Bar', \&main::writeStatusBar);
    $reg->registerEvent('Lane/Register/UserInterface/Update Summary Area', \&main::writeSummaryArea);
    $reg->registerEvent('Lane/Register/UserInterface/Clear Summary Area', \&main::clearSummary);
    $reg->registerEvent('Lane/Register/UserInterface/Beep', \&main::beep);
    $reg->registerEvent('Lane/Register/UserInterface/Clear Entry', \&main::clearEntry);
    $reg->registerEvent('Lane/Register/UserInterface/Print Receipt', \&main::receiptPrint);
    $reg->registerEvent('Lane/Register/UserInterface/Clear Receipt', \&main::clearReceipt);
    $reg->registerEvent('Lane/Register/UserInterface/Map Key', \&main::mapKey);
}

sub initDisplay
{
    #my($top) = MainWindow->new();
    $top = MainWindow->new();
    $top->bind('<Destroy>' => sub {
	if($_[0] == $top)
	{
	    $reg->{'signals'}{'dieWhenConvient'} = 1;
	    $reg->allowSignals;
	}
	       });
    hideCursor($top);
    my $title = 'unknowndataset';
    ($title) = $ENV{'LaneDSN'} =~ /dbname=(\S+)/;
    $top->title("L'ane: $title");
    $main::reg->registerEvent('Lane/CORE/Reload Config', sub{
        $title = 'unknowndataset';
        ($title) = $ENV{'LaneDSN'} =~ /dbname=(\S+)/;
        $top->title("L'ane: $title");
        });
    outerFramesUi($top);

    #splash screen business
    my $sleep = 5;
    $sleep = $ENV{'LaneSplashDelay'} if exists $ENV{'LaneSplashDelay'} and defined $ENV{'LaneSplashDelay'};

    $top->withdraw;
    $entEntry->focus();
#    &Tk::MainLoop;
    $entEntry->update;
    if($sleep)
    {
        my @colors = (-background => 'white', -foreground => 'black');
        my $splash = $top->Toplevel(-borderwidth => 3, -relief => 'ridge', @colors, -pady => 10);
        $splash->title('L\'ane');
        $splash->overrideredirect(1);
        
        use Tk::PNG;
        my $p = $splash->Label(@colors);
        $p->configure(-image => $p->Photo(-format => 'PNG', -data => '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
gvGP/wN7D+2pbn8fbwAAAABJRU5ErkJggg=='));
        $p->grid(-column => 1, -row => 1, -columnspan => 2);
        my $i = 2;
        $splash->Label(-text => '', @colors)->grid(-column => 1, -row => $i++, -columnspan => 2);
        $splash->Label(-text => 'Copyright 2003-2011 Jason Burrell, portions Copyright 2000-2002 Burrell Business Systems.', -font => 'Helvetica 10 bold', @colors)->grid(-column => 1, -row => $i++, -columnspan => 2);
        foreach my $t (
            'L\'ane comes with ABSOLUTELY NO WARRANTY; For details, see the file COPYING.', 'This is free software, and you are welcome to redistribute it under certain conditions;','See the file COPYING for details.',
            '',
            )
        {
            $splash->Label(-text => $t, -font => 'Helvetica 10', @colors)->grid(-column => 1, -row => $i++, -columnspan => 2, -sticky => 'w', -padx => '50');
        }
        foreach my $t (
            'http://l-ane.net/',
            'http://ryotous.com/',
            '',
            "Register version r$main::reg->{'version'}",
            )
        {
            $splash->Label(-text => $t, -font => 'Helvetica 10', @colors)->grid(-column => 1, -row => $i++, -sticky => 'w', -padx => 30);
        }
        my $pg = $splash->Label(@colors);
        $pg->configure(-image => $pg->Photo(-format => 'PNG', -data => 'iVBORw0KGgoAAAANSUhEUgAAAGQAAAA6CAMAAABxuAzhAAAAAXNSR0IArs4c6QAAASxQTFRFK4m7
AHuzAFqbk8/jAGWVAIqyRYqy7vX5AIq7AJTCAFSUAHmopNfoiLrWmcLYNJK+KXqqRaXIAGWqd6jF
d7rUAIWx2+vzAIO5AIKsAGukAF2gAHapAHypu9vqxubxAGitzOPvAHSkAHmtFHWsu9PkAHWsQpvE
AIGwAIWuZqnLAHSxAJC+G3uzAG2pUqTJAGGiAGSlfMPdAHGtAGGl+Pz9AHGovOHuAGuvAIW2AG2v
AIG2sdzrAH2uAH23AFSNEm2oAGipFIK2ZbjWWrPVAFaYAH+rAFiWAHiozN3qAE6MDGWiZpq8AGag
DG2tZqDCRICsd7LRAE+Su9foqtDkDGinqsveBWCiJG6hUqzPd63PZq/PEWifu8/iBmSiB2ep4PH2
EV+WCF6fPT09////p5hTSAAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB9sEFAEbF7XxBC4A
AAqxSURBVFjDvdh7Q9pIFwbwXMDYgCAgt3BRAgFFYiBZkLtYA4jFYmjXW7tr3fn+3+E9ZyaBYPf9
d0+otd1tfn3OmZlQuH/+g+L++XSOtQ/VxeqrbSw9a8x8JeP1W82Wk2U2m23zQ7hqo1q/36f3wJud
79P7foJC5JOHUGakaRog2aUwE3aUDeTThOUEkKyGChi1ftozGEGNDwgGQcNstz8YXhhP8iAli4qu
8jxL0u1vkH2GnAdPd9qFiKqZmtk2l4IACmVseuOZbLPbLqBcwYb/YEyA0fUhItCtfjq9061gBmqT
xFX6KiTRTF0RAgJ1xnCvmTx2xo4j393JzlW0GoveLRyEAZnNljoYEOXDSNDYz0ynYLAk236lVUAg
SpMSYCx+tDqFQafTahyGB1BvUqclDgpiw5FtWjNFnwCi86NNEBfpTvNTimyT7FOlr9YhSD2rCApV
xo1U61CRv3PPf0jVO2dWvhDD5cXi/aJ4IaMygx9NFmU07FPFNbrDfH4H2faLV+uqVteWhgIlCPJV
KrrAeSyi4tXCxm+cKP7W4q4Tc+DXwEAUWjQJBEkj0s2H8gyZ7iC0W4jUNd3AkSDyfCTD+AX5LtVY
4GoTZvbiMMU59qJRvINhYQm0XSbPkPR+GonQvyOowEJEJGsEFNawMOdg1+RYa4EYVRyu8w47ZFCW
2dIWDJrE7HszGc7nc6bsIN5UAMEsTcNQ4KUIf3U4mWKd6AK6T8dky4vWjSO/D8rUh4J+mbppjjBH
ulvL5SiCDduZiRuliwZf1wxEcCh3nYasUOSwEeVw40CqRkwsvjvl4pVsu0oWDZOniJoruQpDkPEn
2e/ztF+6YTBG+GvAydi3v94GRfLHM9xUkaMSkYp3DvdN8AyhafYAqQMyykGVEJlvkGnNRSizPxqh
wutLg5UitKIyJvpevGpIb8VHQVEcUSzGRNt5fva6hYjJkCEzdpFNEhbFRSZNFzHk2OcZLuZHUZ7d
vYtXgMhiVW6IjoDTwnngZVDEHA21nIYMReZ0fQ19g/eSjBjiKTbXecQkj+GZIjgiB6L9LC440WkM
3l0BL4Z4hK9fkCUz3SKfKNJHZbJsNqnTFO47V7jOymHBgAxRSCLcF6/+Fp3WDfbRq7pZN81sW3WR
+dyH+NqFSLc/olmatAxkbLgxIFwYuxYuA6LMblqP4lXxXviAwFmsqR+D/I6k+5hkxDcnHmMJz6Jt
QZLBo2JzRWidodj3nejn1o2t7CBmFk78nLpt12bP+2cCle7TKKPJcuIyTaVc/FuxLCt84citZxvW
taXYsbdi+LsPMYy6qeOzS3URbzt6uxGQ5L4bJZ1miD6BqTDGEsIXdtMQytJn7q1ss4WtDEjUefwb
Y9GXYdV1HYzlxshtu+Xu+GTSZQBJI2JOJtsoUWiSZUcHN4M/xLJiwR2Vq3CqddOCJaFY9DLipo7K
xGvXfJ7bObwYkqztnyMCWxbC1CesMI1hhZ9tu1rkGoOqOBAswzLsG7EcvZGgj952ajJk067tNvEj
NUxzvp9mWTwkHo8340ojFa0WW8Vw9XunKDQtq2nfvIlhMabgrGgBYiKis30ydxdXyN+uUxolCW9U
Rm6UiVdxCKNwg3AjlmqJnY4owJQspVVtlC1hY1jsqZWdtL3NuBmJb/Csuv1ajqdMuqfrWyeuwEu5
5rj7qijEYUrHg4YNAi4L+tWwTNYujc1knsv5gkzZGwlm1JL9mqaqyIxgsRz7lGZzEsfDpRpWaP86
DfiZrj18WcrERXJsx88/dmuLdGvdJCDwLg3WV+/yUj+mNYErzsqKDiBUHNp3b1lx74oblu4lUdXN
TELbbXK6bVcXhkINVOo9YLCOfWVxiBwrnHhsxTdlwQKmiO4trrlvl/j3iYsMGcKP6pe6/hGJx3sd
/Jsrn28Un2FZep0laaOhznPz3SPY364kLi+VV2mSkXnJEH+eeHxwA1uvmrqOe7+ByKTuItr/2SUf
kCQzQOF7fsRTrjvhcLjIWZtwOHg85Wm7cl67PiCnG6SLSLfmtgumcrlbxwhZ97FnLh7fNhCQSxrE
1L2x7+4SurgoEtwMpbtBQOn12Ph7W4qO4dgNhosbBuJ2S4dVAwNhB/BukI9ITfUQVC57vcvfEvlm
FG+iwZ09PJyVWZDow9FD1DXc7b5FYoRW4fM2ClvHqHDch7ZtDBh6/YD+SekMgkRT9PtUFNpFjjZB
EAmCEiORxEviIEUePALOsHqPtqy3Xscv/2UZxOMwj/oDqRwuFqtb6VCNStKXX+NfCUmKApLIZtwg
W2SvNC+FypKU9ZKkaRacy7pi9z4SdN+AUS+QX/JEz1ZJolQgh+NlKVTiSKWEiGdQJEiR6WmyG+wQ
Q309IeTkFZijInzzwBUkqXLQ477BLy4ODi4PDsova64cgTeS36IUmbRhaVWfDklkXIKhz0MRcjgF
dBdJBgHJ4+jfpECLRPZWB+RgdESqzbsE+fqSSiW+PElSYvUlJVWE9e3tOvF0K73s7d1KjfoZuT1r
tGFhtc/IlwDb668gYLvw3NomASQRi8U+F8jBIXmYLU3zhTSOTpT6aPSysio/HSVCVo6tPJGf8pok
HOcr2bPjelmK6OaLBGP/dnQ9fyCrbCmEBb3L0iSnp6c7CFsjB4Ezcohj4UjigkRiMJper1Cxj9eS
Y8HSWv901tLCqotkVYU6SQl6+/0pEUkR6eIIEDx9Q3kXyezOBJPsQQUCpSMS4PGcJInLiwqM4Wg0
KqytOqk4MGxYAwKQPF8gbo31djbXXga+kNQZ3Jcd8UfkCyJ5N0lwg+yFYFnDXI7IFRyU6jVJTHjT
2EuQB0Cao4Jk4ZIrVIzCWuFh3LI8xn/SP63PNDWkzucn5IlUAmC8ivkCeSqxJEj4kSl91ier5Cs8
wPhXcvjwCm0z1xW9sDb4I7IHB+e1tFYKFQV34ApOk/bZWZmk4DkyV0MpaRwhX+HfV1GpQiKzPEVo
jqAPybtP4YJ00U0+S9/G3ySO569TEaNwa/DXkvRQfX1LVRjCkdtyW6+Sl+UBqUTVEBchB+PrWxK5
qF4UiPQjMCWVhyOsXSTjnvjXEex15IdxXSHrAin8gPuQAn8NG+Pk4idFtLpZ/UnWJ+Rgsczj6oIl
8zIOhPD/gfqTJPIZb2ihLRLMBKbec+W0vLf3I5AdqtqP1d7TTNF4bvXLqNeNmSyk/hQ0QdCgU8un
1erXeAmdChyuVqvxOABDLwX2Vnuz8dfbcmYacMuHBIOeUUvWamoeP1Yaapre1jQVf7qWClwdQq4U
+gEP/UAs28anLZy+pWwJNghbWaUSzKIcyGQ2Y2fI+e8KvGrd2nCobYqesNLXcdbED6ra8CDU8qqK
DcnhlzlcIZLHb6f4hbbrFH4Ed5GtUmMK1JDfKNlDbMqSfazX1tQ8PqXIXMX7I4AEXPAUIZkM3B9X
FhCEIRsj6IviVh8caFebftCWXWYpAYI6RCOkuiG2CATBJBkM4UcgyfkOAzfP1Hw1HPLw3lCjt4c3
PSoLEYIX3n8eYgjNQfBBhQQmSQZ9SHAnyymOxIcM2eUWzcBSwDZ3EVypxDcOiuA8tjPZBHHHcprM
0H4xaDjdAFj5Idw+j0aIPjroibj7mZB7YiU3N/WQ8x3lFABKTGmKqU9wOwVXaAts3jcwhJ0mpzvI
f1D/A2jkw2yQQDbrAAAAAElFTkSuQmCC'));
        $pg->grid(-column => 2, -row => $i++ - 4, -rowspan => 4, -sticky => 'e', -padx => 10);
        
        $splash->update;
        my ($x, $y) = ($splash->width(), $splash->height());
        my $rootX = int($splash->vrootwidth / 2 - $x / 2);
        my $rootY = int($splash->vrootheight / 2 - $y / 2);
        $splash->geometry("+$rootX+$rootY");
        $splash->update;
        
        sleep($sleep);

        $splash->destroy;
    }
    $top->deiconify;

    return 1;
}

sub writeStatusBar
{
    if(defined($lblStatusBar))
    {
	# writes info in the status bar (called by idleUpdate)
	$statusBar = '[' . ($reg->{'clerk'}->{'name'} ? $reg->{'clerk'}->{'name'} : '' ) . ']   ' . $reg->{'lc'}->nowFmt('longTimestamp');
    }
    return 1;
}

sub writeSummaryArea
{
    if(defined($txtSummary))
    {
	
	# writes info in the summary area
	clearSummary();
#    $txtSummary->insert('end', );
	$txtSummary->insert('end', "\n\n");
	$txtSummary->insert('end', sprintf("%14.14s: %12.12s\n", $reg->{'lc'}->get('Subtotal'), $reg->{'lc'}->moneyFmt($reg->{'sale'}->{'subt'})));
	$txtSummary->insert('end', sprintf("%14.14s: %12.12s\n", $reg->{'lc'}->get('Taxes'), $reg->{'lc'}->moneyFmt($reg->{'sale'}->{'allTaxes'})));
	$txtSummary->insert('end', sprintf("%14.14s: %12.12s\n", $reg->{'lc'}->get('Total'), $reg->{'lc'}->moneyFmt($reg->{'sale'}->{'total'})));
	$txtSummary->insert('end', sprintf("%14.14s: %12.12s\n", $reg->{'lc'}->get('Amount Due'), $reg->{'lc'}->moneyFmt($reg->{'sale'}->{'due'})));
	$txtSummary->insert('end', sprintf("%14.14s: %12.12s\n", $reg->{'lc'}->get('Due w/Disc'), $reg->{'lc'}->moneyFmt($reg->{'sale'}->{'due'} - $reg->{'term'}->applyDisc($reg->{'sale'}->{'total'})))) if $reg->{'term'}->{'discDays'} > 0 and !$reg->{'ra-tranz'};
	
	#customerName/terms
	if($reg->{'cust'}->{'id'})
	{
#	$txtSummary->insert('end', "Customer:");
	    $txtSummary->insert('end', sprintf("\n  %-28.28s\n", $reg->{'cust'}->{'id'}));
	    $txtSummary->insert('end', sprintf("  %-28.28s\n", $reg->{'cust'}->getName()));
	    $txtSummary->insert('end', sprintf("  %-28.28s\n", $reg->{'cust'}->{'billAddr1'}));
	    $txtSummary->insert('end', sprintf("  %-28.28s\n", $reg->{'cust'}->{'billAddr2'}));
	    $txtSummary->insert('end', sprintf("  %-28.28s\n", $reg->{'cust'}->{'billCity'} . ", " . $reg->{'cust'}->{'billSt'} . " " . $reg->{'cust'}->{'billZip'}));
	    $txtSummary->insert('end', sprintf("  %-28.28s\n", $reg->{'cust'}->{'billPhone'}));
	    my $terms = "Terms: " . $reg->{'term'}->{'descr'};
	    $txtSummary->insert('end', sprintf("\n  %-28.28s\n", (' ' x ((28 - length($terms)) / 2)) . $terms)) if !$reg->{'ra-tranz'};
	    $txtSummary->insert('end', sprintf("%30.30s\n", $reg->{'lc'}->get("Disc Date") . ": " . $reg->{'term'}->{'discFromNow'})) if $reg->{'term'}->{'discDays'} > 0 and !$reg->{'ra-tranz'};
	    $txtSummary->insert('end', sprintf("%30.30s\n", $reg->{'lc'}->get("Due Date") . ": " . $reg->{'term'}->{'dueFromNow'})) if $reg->{'term'}->{'discDays'} > 0 and !$reg->{'ra-tranz'};
	}
    }
    return 1;
}

sub clearSummary
{
    if(defined($txtSummary))
    {
	$txtSummary->delete('1.0', 'end');
    }
    return 1;
}

sub clearReceipt
{
    if(defined($txtReceipt))
    {
	$txtReceipt->delete('1.0', 'end');
    }
    return 1;
}

sub clearEntry
{
    $ent = '';
    return 1;
}

sub infoPrint
{
    # puts info (prompt string) into the info window
    my ($t) = @_;
    if(defined($txtInfo))
    {
	$txtInfo->delete('1.0', 'end');
	$txtInfo->insert('end', $t);
    }
    return 1;
}

sub receiptPrint
{
    if(defined($txtReceipt))
    {
	$txtReceipt->insert('end', $_[0] . "\n");
	$txtReceipt->see('end');
    }
    return 1;
}

sub getInputLine
{
    my ($open) = @_;
    $open = 1 if defined $open and $open =~ /open/i;
    #lock out the functions and menu items
    &lockInterface if !$open;
    for(;;)
    {
	#let's try the sig handler here...
	$reg->allowSignals();

	if($#input < 0)
	{
	    #check the autologout business here
	    my $now = time;
	    if($reg->{'custdisp-idle-timeout'} and $reg->{'lastNotIdle'} + $reg->{'custdisp-idle-timeout'} < $now)
	    {
		$pole->printPole($reg->{'string'}->{'data'}) if $reg->{'string'}->open('custdisp-idle');
	    }
	    if($reg->{'autologoutTime'} and $reg->{'lastNotIdle'} + $reg->{'autologoutTime'} < $now)
	    {
		$reg->clerkSignin() if defined $reg->{'clerk'}{'id'};
		$reg->{'lastNotIdle'} = time; #$now; we can't use the cached now, since clerkSignin can take a long time
	    }
	    #wait, call a quick-to-return event handler here, like Tk->DoOneEvent or Tk->update
	    &idleUpdate;
	}
	else
	{
	    #let them be free...
	    &unlockInterface if !$open;
	    return shift @input;
	}
    }
}

sub getResponses
{
    #the first thing is a "hidden" flag now
    my $hidden = 1 if shift =~ /hide/i;
    my @q = @_;
    my @r;
    my $c;

    #this input loop only understands clear(f5), bksp, and printable chars, the slash functions are put in place in the responses

    #hide if needed
    $entEntry->configure(-show => '*') if $hidden;
    for(my $i = 0; $i <= $#q; $i++)
    {
	infoPrint($q[$i]) if $q[$i] ne '';
	clearEntry();
	$r[$i] = getInputLine();
    }
    $entEntry->configure(-show => undef) if $hidden;
    return @r;
}

sub beep
{
    $entEntry->bell();
    return 1;
}

sub byeBye
{
    exit;
}

sub mainInputLoop
{
    my ($entStr, $cmd, $cmdStr);

    clearEntry();
    $entStr = $cmd = $cmdStr = $amt = "";
    $qty = 1;
    for(;;) # most of mainInputLoop is a big case-like if stmt
    {
	if($reg->{'globalReset'})
	{
	    $entStr = $cmd = $cmdStr = $amt = "";
	    $reg->{'globalReset'} = 0;	# $reg->{'globalReset'} isn't really global, it's just for maininputloop
	    $qty = 1;
	    clearEntry();
	}
	
	$entStr = getInputLine('open');
	infoPrint($reg->{'lc'}->get('Enter a product ID, or press a function key'));
	if($entStr =~ s/(-?\d+)\*//)
	{
	    $qty = $1;
        }
	if($entStr =~ s/(-?\d+)@//)
	{
	    $amt = $1;
        }
	next if $entStr eq '';
	if($entStr =~ m{([^/]*)/(\D+)(\d*)})
	{
	    $entStr = $1;
	    $cmdStr = $2;
	    $cmd = $3;
	    if(exists $reg->{'slashFuncts'}{$cmdStr})
	    {
		#hackish for the tests
		$entStr =~ s/%{([^}]+)}/$main::reg->{$1}/g;
		&{$reg->{'slashFuncts'}{$cmdStr}}($cmd, $entStr);
		
	    }
	}
	else
	{
	    $reg->itemProcess($qty, $amt, $entStr);
	}
	$entStr = $cmdStr = $cmd = $amt = "";
	$qty = 1;
    }
}

