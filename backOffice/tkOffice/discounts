#!/usr/bin/perl -w

#tkOffice/discounts
#Copyright 2001-2005 Jason Burrell

#This is the discounts back office program for L'anePOS
#$Id: discounts 1198 2010-10-24 18:26:03Z jason $

BEGIN {
    use FindBin;
    use File::Spec;
    $ENV{'LaneRoot'} = File::Spec->catdir($FindBin::Bin, File::Spec->updir, File::Spec->updir); #use the correct number of updirs
    require File::Spec->catfile($ENV{'LaneRoot'}, 'config', 'init.pl');
}

#lane stuff
use LanePOS::Discount;
$disc = new Discount;
use LanePOS::Locale; #ooh, we're heading for i18n now!
$lc = new Locale;

$isSaved = 1;

# Sample SpecTcl main program for testing GUI
use Tk;
my($top) = MainWindow->new();
$top->title('L\'ane: ' . $lc->get('Lane/BackOffice/Discounts'));

$top->bind(Tk::Entry, '<KeyRelease>', sub { # turns off $isSaved if the user types something
    #it wouldn't do anything when i bound to <Key> or <KeyPress>. don't know why
    $isSaved = 0;
});

#############################################################
# general use subs
#############################################################
sub askToSave {			# rtns f-0 if 'Discard/No', t-1 if 'Saved/Yes'
    #prompt w/a popup window:
    # "This record is not saved. Do you want a chance to save your changes?"
    # Yes (chance to save) -  No (discard)

    #askToSave doesn't work how it should
    #so, i've disabled it
    return 0;

    require Tk::DialogBox;
    my $yes = $lc->get('Lane/BackOffice/Buttons/Yes');
    my $popupWin = $top->DialogBox(
		       -title => $lc->get('Lane/BackOffice/Confirmation'),
		       -buttons => [$yes, $lc->get('Lane/BackOffice/Buttons/No, Discard')]
		  );
    $popupWin->add(Label, -text => $lc->get('Lane/BackOffice/Save Prompt'))->pack();
#    $popupWin->add(Label, -text => "(Selecting 'Yes' only cancels the previous operation.)")->pack();

    if($popupWin->Show eq $yes)
    {
	$popupWin->destroy;
	return 1;
    }
    $popupWin->destroy;
    return 0;			# didn't want to save
}

sub newRec {
    unless($isSaved)
    {
	if(&askToSave)		# ask user if he/she wants to save
	{
	    #the user wants to save the file first
	    return;
	}
    }
    #either user didn't want to save, or it was already saved

    #clear the flds
    $disc->{'id'} = $disc->{'descr'} = $disc->{'amt'} = '';
    $disc->{'preset'} = $disc->{'per'} = $disc->{'sale'} = 1;
    #reset the lockable flds
    $entAmt->configure(-state => 'normal');
    $entAmt->configure(-background => $normalColor);

    $isSaved = 1;
    #move to the default fld
    $entId->focus;
}

sub validateDec {
    my ($whole, $fract, $new, $chars, $curr, $ndx, $type) = @_;
    #$whole is the # digits in the whole part, $fract is the # of digits in the fractional part

    #make sure it is even a number
    return 0 if $new =~ /[^\d\.\-]/; #remove non-number chars
    #bounds checking
    return 0 if $new > 10 ** $whole - 1;
    return 0 if $new < - (10 ** $whole - 1);
    $new =~ /\./;
    return 0 if length($') > $fract; #' damn emacs
    return 0 if $new =~ s/\./\./g > 1;
    return 0 if $new =~ s/\-/\-/g > 1;
    if($new =~ /\-/) #it has a dash in it
    {
	return 0 unless $new =~ /^\-/;
    }
    return 1;
}

sub validateInt {
    my ($new, $chars, $curr, $ndx, $type) = @_;

    #allow the fld to be blank
    return 1 if length($new) == 0;
    return 1 if int($new) eq $new; #i want this string comparison
    return 0;
}

sub validateStr {
    my ($len, $new, $chars, $curr, $ndx, $type) = @_;

    return 1 if length($new) <= $len;
    return 0;
}

# interface generated by SpecTcl (Perl enabled) version 1.1 
# from /burrell/LanePOS/backOffice/tkOffice.ui
# For use with Tk402.002, using the grid geometry manager

sub discounts_ui {
	my($root) = @_;

	# widget creation 

	my($frame_1) = $root->Frame (
	);
	my($label_1) = $root->Label (
		-text => $lc->get('Lane/GenericObject/ID'),
	);
	$entId = $root->Entry (
			       -justify => 'right',
			       -textvariable => \$disc->{'id'},
			       -width => '4',
			       -validate => 'key',
			       -vcmd => \&validateInt,
			       -invcmd => sub { $root->bell(); },
			       );
	#used by the {dis,en}able amount subs below
	$normalColor = $entId->cget(-background);
	$disabledColor = 'pink3';

	my($label_2) = $root->Label (
		-text => $lc->get('Lane/Discount/Description'),
	);
	my($entDescr) = $root->Entry (
				      -textvariable => \$disc->{'descr'},
				      -width => '22',
				      -validate => 'key',
				      -vcmd => sub {&validateStr(20,@_);},
				      -invcmd => sub { $root->bell(); },
				      );
	#moved this so rbPreset and rbOpen can modify it
	$entAmt = $root->Entry (
				    -justify => 'right',
				    -textvariable => \$disc->{'amt'},
				    -width => '12',
				    -validate => 'key',
				    -vcmd => sub {&validateDec(10,2,@_);},
				    -invcmd => sub { $root->bell(); },
				    );
	my($rbPreset) = $root->Radiobutton (
					    -text => $lc->get('Lane/Discount/Preset'),
					    -value => 1,
					    -variable => \$disc->{'preset'},
					    -command => sub {
						$entAmt->configure(-state => 'normal');
						$entAmt->configure(-background => $normalColor);
					    },
					    );
	my($rbOpen) = $root->Radiobutton (
					  -text => $lc->get('Lane/Discount/Open'),
					  -value => 0,
					  -variable => \$disc->{'preset'},
					  -command => sub {
					      $disc->{'amt'} = "0.00";
					      $entAmt->configure(-state => 'disabled');
					      $entAmt->configure(-background => $disabledColor);
					  },
					  );
	my($rbPercent) = $root->Radiobutton (
		-text => $lc->get('Lane/Discount/Percent'),
		-value => 1,
		-variable => \$disc->{'per'},
	);
	my($rbFixed) = $root->Radiobutton (
		-text => $lc->get('Lane/Discount/Fixed'),
		-value => 0,
		-variable => \$disc->{'per'},
	);
	my($label_3) = $root->Label (
		-text => $lc->get('Lane/Discount/Amount'),
	);
	my($rbSale) = $root->Radiobutton (
		-text => $lc->get('Lane/Discount/Sale'),
		-value => 1,
		-variable => \$disc->{'sale'},
	);
	my($rbItem) = $root->Radiobutton (
		-text => $lc->get('Lane/Discount/Item'),
		-value => 0,
		-variable => \$disc->{'sale'},
	);
	my($bProcess) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Process'),
	);
	my($bNew) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/New'),
	);
	my($bRemove) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Remove'),
	);
	my($bQuit) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Quit'),
	);

	# widget commands
	$bProcess->configure(
		-command => sub {
		    return if($disc->{'id'} eq '' or $disc->{'descr'} eq '' or $disc->{'amt'} eq ''); #needs to check amt
		    $disc->save;
		    $isSaved = 1;
		    &newRec;
		}
	);
	$bNew->configure(
		-command => sub {&newRec;}
	);
	$bRemove->configure(
		-command => sub {
		    require Tk::DialogBox;
		    my $yes = $lc->get('Lane/BackOffice/Buttons/Yes, Remove');
		    my $popupWin = $top->DialogBox(
						   -title => $lc->get('Lane/BackOffice/Confirmation'),
						   -buttons => [$lc->get('Lane/BackOffice/Buttons/No, Cancel'), $yes]
						   );
		    $popupWin->add(Label, -text => $lc->get('Lane/BackOffice/Remove Prompt'))->pack();
#		    $popupWin->add(Label, -text => "remove this record from the database?")->pack();
		    $popupWin->add(Label, -text => "[$disc->{'id'}, $disc->{'descr'}]")->pack();
		    
		    if($popupWin->Show eq $yes)
		    {
			$popupWin->destroy;
			$disc->remove;
			$isSaved = 1; # to trick newRec
			&newRec;
		    }
		    else
		    {
			$popupWin->destroy;
		    }
		    
		}
	);
	$bQuit->configure(
		-command => sub {
		    if($isSaved)
		    {
			exit;
		    }
		    if(&askToSave)
		    {
			return; # user wants a chance to save
		    }
		    exit; #discard selected
		}
	);

	# Geometry management

	$frame_1->grid(
		-in => $root,
		-column => '1',
		-row => '10',
		-columnspan => '2',
		-sticky => 'e'
	);
	$label_1->grid(
		-in => $root,
		-column => '1',
		-row => '1',
		-sticky => 'e'
	);
	$entId->grid(
		-in => $root,
		-column => '2',
		-row => '1',
		-sticky => 'w'
	);
	$label_2->grid(
		-in => $root,
		-column => '1',
		-row => '2',
		-sticky => 'e'
	);
	$entDescr->grid(
		-in => $root,
		-column => '2',
		-row => '2',
		-sticky => 'w'
	);
	$rbPreset->grid(
		-in => $root,
		-column => '1',
		-row => '3',
		-columnspan => '2'
	);
	$rbOpen->grid(
		-in => $root,
		-column => '1',
		-row => '4',
		-columnspan => '2'
	);
	$rbPercent->grid(
		-in => $root,
		-column => '1',
		-row => '5',
		-columnspan => '2'
	);
	$rbFixed->grid(
		-in => $root,
		-column => '1',
		-row => '6',
		-columnspan => '2'
	);
	$label_3->grid(
		-in => $root,
		-column => '1',
		-row => '7',
		-sticky => 'e'
	);
	$entAmt->grid(
		-in => $root,
		-column => '2',
		-row => '7',
		-sticky => 'w'
	);
	$rbSale->grid(
		-in => $root,
		-column => '1',
		-row => '8',
		-columnspan => '2'
	);
	$rbItem->grid(
		-in => $root,
		-column => '1',
		-row => '9',
		-columnspan => '2'
	);
	$bProcess->grid(
		-in => $frame_1,
		-column => '1',
		-row => '1'
	);
	$bNew->grid(
		-in => $frame_1,
		-column => '2',
		-row => '1'
	);
	$bRemove->grid(
		-in => $frame_1,
		-column => '3',
		-row => '1'
	);
	$bQuit->grid(
		-in => $frame_1,
		-column => '4',
		-row => '1'
	);

	# Resize behavior management

	# container $root (rows)
	$root->gridRowconfigure(1, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(2, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(3, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(4, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(5, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(6, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(7, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(8, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(9, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(10, -weight  => 0, -minsize  => 30);

	# container $root (columns)
	$root->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(2, -weight => 0, -minsize => 30);

	# container $frame_1 (rows)
	$frame_1->gridRowconfigure(1, -weight  => 0, -minsize  => 30);

	# container $frame_1 (columns)
	$frame_1->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(2, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(3, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(4, -weight => 0, -minsize => 30);

	# additional interface code
	$entId->bind('<Return>', sub{
	    &askToSave unless $isSaved;
	    unless($disc->open($disc->{'id'}))
	    {
		$isSaved = 1; #to trick newRec()
		&newRec;
		$entId->focus();
	    }
	    else
	    {
		if($disc->{'preset'} == 0)
		{
		    $entAmt->configure(-state => 'disabled');
		    $entAmt->configure(-background => $disabledColor);
		}
		else
		{
		    $entAmt->configure(-state => 'normal');
		    $entAmt->configure(-background => $normalColor);
		}
		$isSaved = 1;
		shift->focusNext()->focus();
	    }
	});

	# end additional interface code
}


discounts_ui $top;
#this is to trick newRec() into not asking "save?"
$isSaved = 1;
&newRec;
Tk::MainLoop;

1;
