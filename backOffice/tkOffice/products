#!/usr/bin/perl -w

#tkOffice/products
#Copyright 2001-2005 Jason Burrell

#This is the products back office program for L'anePOS
#$Id: products 1198 2010-10-24 18:26:03Z jason $

BEGIN {
    use FindBin;
    use File::Spec;
    $ENV{'LaneRoot'} = File::Spec->catdir($FindBin::Bin, File::Spec->updir, File::Spec->updir); #use the correct number of updirs
    require File::Spec->catfile($ENV{'LaneRoot'}, 'config', 'init.pl');
}

#lane stuff
use LanePOS::Product;
$prod = new Product;
use LanePOS::Locale; #ooh, we're heading for i18n now!
$lc = new Locale;

$isSaved = 1;

# Sample SpecTcl main program for testing GUI
use Tk;
my($top) = MainWindow->new();
$top->title('L\'ane: ' . $lc->get('Lane/BackOffice/Products'));

$top->bind(Tk::Entry, '<KeyRelease>', sub { # turns off $isSaved if the user types something
    #it wouldn't do anything when i bound to <Key> or <KeyPress>. don't know why
    $isSaved = 0;
});

my (@qtyFlds);

my $ext;

#############################################################
# general use subs
#############################################################
sub askToSave {			# rtns f-0 if 'Discard/No', t-1 if 'Saved/Yes'
    #prompt w/a popup window:
    # "This record is not saved. Do you want a chance to save your changes?"
    # Yes (chance to save) -  No (discard)

    #askToSave doesn't work how it should
    #so, i've disabled it
    return 0;

    require Tk::DialogBox;
    my $yes = $lc->get('Lane/BackOffice/Buttons/Yes');
    my $popupWin = $top->DialogBox(
		       -title => $lc->get('Lane/BackOffice/Confirmation'),
		       -buttons => [$yes, $lc->get('Lane/BackOffice/Buttons/No, Discard')]
		  );
    $popupWin->add(Label, -text => $lc->get('Lane/BackOffice/Save Prompt'))->pack();
#    $popupWin->add(Label, -text => "(Selecting 'Yes' only cancels the previous operation.)")->pack();

    if($popupWin->Show eq $yes)
    {
	$popupWin->destroy;
	return 1;
    }
    $popupWin->destroy;
    return 0;			# didn't want to save
}

sub newRec {
    unless($isSaved)
    {
	if(&askToSave)		# ask user if he/she wants to save
	{
	    #the user wants to save the file first
	    return;
	}
    }
    #either user didn't want to save, or it was already saved

    #clear the flds
    $prod->{'id'} = $prod->{'descr'} = $prod->{'category'} = $prod->{'vendor'} = $prod->{'caseId'} = $prod->{'reorderId'} = $ext = '';
    $prod->{'price'} = $prod->{'taxes'} = $prod->{'onHand'} = $prod->{'minimum'} = $prod->{'reorder'} = $prod->{'caseQty'} = $prod->{'cost'} = 0;
    $prod->{'trackQty'} = 1;
    $prod->{'type'} = 'p';

    $frmTaxes->updateButtons;
    $prod->parseExt($ext); #to clear it out

    #clear the locked flds if necessary
    &qtyUpdate;

    $isSaved = 1;
    #move to the default fld
    $entId->focus;
}

sub validateDec {
    my ($whole, $fract, $new, $chars, $curr, $ndx, $type) = @_;
    #$whole is the # digits in the whole part, $fract is the # of digits in the fractional part

    #make sure it is even a number
    return 0 if $new =~ /[^\d\.\-]/; #remove non-number chars
    #bounds checking
    return 0 if $new > 10 ** $whole - 1;
    return 0 if $new < - (10 ** $whole - 1);
    $new =~ /\./;
    return 0 if length($') > $fract; #' damn emacs
    return 0 if $new =~ s/\./\./g > 1;
    return 0 if $new =~ s/\-/\-/g > 1;
    if($new =~ /\-/) #it has a dash in it
    {
	return 0 unless $new =~ /^\-/;
    }
    return 1;
}

sub validateInt {
    my ($new, $chars, $curr, $ndx, $type) = @_;

    #allow the fld to be blank
    return 1 if length($new) == 0;
    return 1 if int($new) eq $new; #i want this string comparison
    return 0;
}

sub validateStr {
    my ($len, $new, $chars, $curr, $ndx, $type) = @_;

    return 1 if length($new) <= $len;
    return 0;
}

sub qtyUpdate {
    my $i;
    if($prod->{'trackQty'} eq 1)
    {
	#turn the flds on
	foreach $i (@qtyFlds)
	{
	    $i->configure(-state => 'normal');
	    $i->configure(-background => $normalColor);
	}
    }
    else
    {
	#turn the flds off
	foreach $i (@qtyFlds)
	{
	    $i->configure(-state => 'disabled');
	    $i->configure(-background => $disabledColor);
	}
	$prod->{'caseId'} = '';
	$prod->{'onHand'} = $prod->{'minimum'} = $prod->{'reorder'} = $prod->{'caseQty'} = 0;
    }    
    if($prod->{'type'} eq 'p')
    {
	$entPrice->configure(-state => 'normal');
	$entPrice->configure(-background => $normalColor);
    }
    else
    {
	$entPrice->configure(-state => 'disabled');
	$entPrice->configure(-background => $disabledColor);
    }
}

# interface generated by SpecTcl (Perl enabled) version 1.1 
# from /burrell/LanePOS/backOffice/tkOffice/ui.files/products.ui
# For use with Tk402.002, using the grid geometry manager

sub products_ui {
	my($root) = @_;

	# widget creation 

	use LanePOS::Tax;
	my $tax = new Tax;
	use Tk::Bitcheckbutton;
	@taxes = $tax->getAllDescr; #this is used by open as a bound
	$frmTaxes = $root->Bitcheckbutton(-variable => \$prod->{'taxes'}, -bititems => \@taxes);
	my($frame_3) = $root->Frame (
	);
	my($frame_1) = $root->Frame (
	);
	my($label_1) = $root->Label (
		-text => $lc->get('Lane/GenericObject/ID'),
	);
	$entId = $root->Entry (
			       -textvariable => \$prod->{'id'},
			       -validate => 'key',
			       -vcmd => sub {&validateStr(20,@_);},
			       -invcmd => sub { $root->bell(); },
			       );
	$normalColor = $entId->cget(-background);
	$disabledColor = 'pink3';
	my($label_2) = $root->Label (
		-text => $lc->get('Lane/Product/Description'),
	);
	my($entDescr) = $root->Entry (
				      -textvariable => \$prod->{'descr'},
				      -width => '40',
				      -validate => 'key',
				      -vcmd => sub {&validateStr(40,@_);},
				      -invcmd => sub { $root->bell(); },
				      );
	my($label_3) = $root->Label (
		-text => $lc->get('Lane/Product/Price'),
				     );
	$entPrice = $root->Entry (
				      -justify => 'right',
				      -textvariable => \$prod->{'price'},
				      -width => '12',
				      -validate => 'key',
				      -vcmd => sub {&validateDec(8,3,@_);},
				      -invcmd => sub { $root->bell(); },
				      );
	my($label_4) = $root->Label (
				     -text => $lc->get('Lane/Product/Category'),
				     );
	my($entCategory) = $root->Entry (
					 -textvariable => \$prod->{'category'},
					 -width => '5',
					 -validate => 'key',
					 -vcmd => sub {&validateStr(5,@_);},
					 -invcmd => sub { $root->bell(); },
					 );
	my($label_5) = $root->Label (
				     -text => $lc->get('Lane/Product/Taxes'),
				     );
	my($label_13) = $root->Label (
				      -text => $lc->get('Lane/Product/Type'),
				      );
	my($rbPreset) = $root->Radiobutton (
					    -text => $lc->get('Lane/Product/Type/Preset'),
					    -value => 'p',
					    -variable => \$prod->{'type'},
	);
	my($rbOpen) = $root->Radiobutton (
		-text => $lc->get('Lane/Product/Type/Open'),
		-value => 'o',
		-variable => \$prod->{'type'},
	);
	my($rbOpenNeg) = $root->Radiobutton (
		-text => $lc->get('Lane/Product/Type/Open Negative'),
		-value => 'n',
		-variable => \$prod->{'type'},
	);
	my($cbTrackQty) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Product/Track Quantity'),
		-variable => \$prod->{'trackQty'},
	);
	my($label_14) = $root->Label (
		-text => $lc->get('Lane/Product/On Hand'),
	);
	my($label_15) = $root->Label (
		-text => $lc->get('Lane/Product/Minimum'),
	);
	my($label_16) = $root->Label (
		-text => $lc->get('Lane/Product/Reorder'),
	);
	my($label_17) = $root->Label (
		-text => $lc->get('Lane/Product/Items Per Case'),
	);
	my($label_18) = $root->Label (
		-text => $lc->get('Lane/Product/Case ID'),
	);
	my($label_19) = $root->Label (
		-text => $lc->get('Lane/Product/Vendor'),
	);
	my($label_20) = $root->Label (
		-text => $lc->get('Lane/Product/Extended'),
	);
	my($label_21) = $root->Label (
		-text => $lc->get('Lane/Product/Cost'),
	);
	my($label_22) = $root->Label (
		-text => $lc->get('Lane/Product/Reorder ID'),
	);
	my($entOnHand) = $root->Entry (
				       -justify => 'right',
				       -textvariable => \$prod->{'onHand'},
				       -width => '10',
				       -validate => 'key',
				       -vcmd => sub {&validateDec(8,3,@_);},
				       #\&validateInt,
				       -invcmd => sub { $root->bell(); },
				       );
	push @qtyFlds, $entOnHand;
	my($entMinimum) = $root->Entry (
					-justify => 'right',
					-textvariable => \$prod->{'minimum'},
					-width => '10',
					-validate => 'key',
					-vcmd => sub {&validateDec(8,3,@_);},
				       #\&validateInt,
					-invcmd => sub { $root->bell(); },
	);
	push @qtyFlds, $entMinimum;
	my($entReorder) = $root->Entry (
					-justify => 'right',
					-textvariable => \$prod->{'reorder'},
					-width => '10',
					-validate => 'key',
					-vcmd => sub {&validateDec(8,3,@_);},
				       #\&validateInt,
					-invcmd => sub { $root->bell(); },
	);
	push @qtyFlds, $entReorder;
	my($entCaseQty) = $root->Entry (
					-justify => 'right',
					-textvariable => \$prod->{'caseQty'},
					-width => '10',
					-validate => 'key',
					-vcmd => sub {&validateDec(8,3,@_);},
				       #\&validateInt,
					-invcmd => sub { $root->bell(); },
	);
	push @qtyFlds, $entCaseQty;
	my($entCaseId) = $root->Entry (
				       -textvariable => \$prod->{'caseId'},
				       -validate => 'key',
				       -vcmd => sub {&validateStr(20,@_);},
				       -invcmd => sub { $root->bell(); },
	);
	push @qtyFlds, $entCaseId;
	my($entVendor) = $root->Entry (
				       -textvariable => \$prod->{'vendor'},
				       -validate => 'key',
				       -vcmd => sub {&validateStr(20,@_);},
				       -invcmd => sub { $root->bell(); },
				       );
	my($entCost) = $root->Entry (
				      -justify => 'right',
				      -textvariable => \$prod->{'cost'},
				      -width => '12',
				      -validate => 'key',
				      -vcmd => sub {&validateDec(8,3,@_);},
				      -invcmd => sub { $root->bell(); },
				      );
	my($entReorderId) = $root->Entry (
				      -textvariable => \$prod->{'reorderId'},
				      -width => '20',
				      -validate => 'key',
				      -vcmd => sub {&validateStr(20,@_);},
				      -invcmd => sub { $root->bell(); },
				      );
	my($entExtended) = $root->Entry (
				      -textvariable => \$ext,
				      -width => '30',
				      -validate => 'key',
				      -vcmd => sub {&validateStr(40,@_);},
				      -invcmd => sub { $root->bell(); },
				      );
	my($bProcess) = $root->Button (
				       -text => $lc->get('Lane/BackOffice/Buttons/Process'),
				       );
	my($bSearch) = $root->Button (
				      -text => $lc->get('Lane/BackOffice/Buttons/Search'),
				      );
	my($bNew) = $root->Button (
				   -text => $lc->get('Lane/BackOffice/Buttons/New'),
				   );
	my($bRemove) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Remove'),
	);
	my($bQuit) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Quit'),
	);

	# widget commands

	$rbPreset->configure(
			     -command => sub {
				 $entPrice->configure(-state => 'normal');
				 $entPrice->configure(-background => $normalColor);
			     }
			     );
	$rbOpen->configure(
			   -command => sub {
			       $prod->{'price'} = "0.00";
			       $entPrice->configure(-state => 'disabled');
			       $entPrice->configure(-background => $disabledColor);
			   }
			   );
	$rbOpenNeg->configure(
			      -command => sub {
				  $prod->{'price'} = "0.00";
				  $entPrice->configure(-state => 'disabled');
				  $entPrice->configure(-background => $disabledColor);
			      }
			      );
	$cbTrackQty->configure(
			       -command => sub {&qtyUpdate;},
			       );

	$bProcess->configure(
		-command => sub {
		    return if($prod->{'id'} eq '' or $prod->{'descr'} eq '' or $prod->{'price'} eq '');
		    $prod->{'extended'} = $prod->parseExt($ext);
		    $prod->save;
		    $isSaved = 1;
		    &newRec;
		}
	);
	$bSearch->configure(
		-command => sub {
		    #popup a win to ask for text
		    #show search results in a window
		    require Tk::DialogBox;
		    my $searchWin = $root->DialogBox(
						     -title => $lc->get('Lane/BackOffice/Buttons/Search'),
						     -buttons => [
								  $lc->get('Lane/BackOffice/Buttons/Search'),
								  $lc->get('Lane/BackOffice/Buttons/Cancel')
								  ]
						     );
		    
		    $searchWin->add(Label, -text => $lc->get('Lane/Product/Search Prompt'))->pack();
		    $searchWin->add(Entry, -textvariable => \$SearchTxt,
				    -width => '30')->pack();
		    if($searchWin->Show eq $lc->get('Lane/BackOffice/Buttons/Search'))
		    {
			my @findings = $prod->searchByDescr($SearchTxt);
			if((ref $findings[0]) eq 'HASH') # it found something
			{	# if it didn't find anything ref would be ARRAY
			    #show the search results box
			    my $foundWin = $root->DialogBox(
				-title => $lc->get('Lane/BackOffice/Search Results'),
				-buttons => [
					     $lc->get('Lane/BackOffice/Buttons/OK'),
					     $lc->get('Lane/BackOffice/Buttons/Cancel')
					     ]);
			    $foundWin->add(Label, -text => $lc->get('Lane/BackOffice/Search Results Text'))->pack();
			    my $fndScroll = $foundWin->add(Scrollbar);
			    my $fndList = $foundWin->add(Listbox, -width => '0', -yscrollcommand => ['set' => $fndScroll]);
			    $fndScroll->configure(-command => ['yview' => $fndList]);
			    $fndScroll->pack(-side => 'right', -fill => 'y');
			    $fndList->pack(-side => 'left', -fill => 'both', -expand => '1');
			    for(my $i = 0; $i <= $#findings; ++$i)
			    {	# populate the list of findings
				$fndList->insert('end', $findings[$i]->{'descr'});
			    }
			    if($foundWin->Show eq $lc->get('Lane/BackOffice/Buttons/OK'))
			    {	# the user picked something (maybe)
				my @selected = $fndList->curselection;
				$prod->open($findings[$selected[0]]->{'id'});
				&qtyUpdate;
				#fixup extended
				$ext = $prod->deParseExt($prod->{'extended'});
				#"click" the tax buttons
				$frmTaxes->updateButtons;
				$entId->focus;
			    }
			    $foundWin->destroy;
		        }
		    } 
		    $searchWin->destroy;		    
		}
	);
	$bNew->configure(
		-command => sub {&newRec;}
	);
	$bRemove->configure(
		-command => sub {
		    require Tk::DialogBox;
		    my $yes = $lc->get('Lane/BackOffice/Buttons/Yes, Remove');
		    my $popupWin = $top->DialogBox(
						   -title => $lc->get('Lane/BackOffice/Confirmation'),
						   -buttons => [$lc->get('Lane/BackOffice/Buttons/No, Cancel'), $yes]
						   );
		    $popupWin->add(Label, -text => $lc->get('Lane/BackOffice/Remove Prompt'))->pack();
		    $popupWin->add(Label, -text => "[$prod->{'id'}, $prod->{'descr'}]")->pack();

		    if($popupWin->Show eq $yes)
		    {
			$popupWin->destroy;
			$prod->remove;
			$isSaved = 1; # to trick newRec
			&newRec;
		    }
		    else
		    {
			$popupWin->destroy;
		    }
		    
		}
	);
	$bQuit->configure(
		-command => sub {
		    if($isSaved)
		    {
			exit;
		    }
		    if(&askToSave)
		    {
			return; # user wants a chance to save
		    }
		    exit; #discard selected
		}
	);
	# Geometry management

	$frmTaxes->grid(
		-in => $root,
		-column => '2',
		-row => '5',
		-sticky => 'w'
	);
	$frame_3->grid(
		-in => $root,
		-column => '1',
		-row => '10',
		-columnspan => '2'
	);
	$frame_1->grid(
		-in => $root,
		-column => '1',
		-row => '15',
		-columnspan => '2',
		-sticky => 'e'
	);
	$label_1->grid(
		-in => $root,
		-column => '1',
		-row => '1',
		-sticky => 'e'
	);
	$entId->grid(
		-in => $root,
		-column => '2',
		-row => '1',
		-sticky => 'w'
	);
	$label_2->grid(
		-in => $root,
		-column => '1',
		-row => '2',
		-sticky => 'e'
	);
	$entDescr->grid(
		-in => $root,
		-column => '2',
		-row => '2',
		-sticky => 'w'
	);
	$label_3->grid(
		-in => $root,
		-column => '1',
		-row => '3',
		-sticky => 'e'
	);
	$entPrice->grid(
		-in => $root,
		-column => '2',
		-row => '3',
		-sticky => 'w'
	);
	$label_4->grid(
		-in => $root,
		-column => '1',
		-row => '4',
		-sticky => 'e'
	);
	$entCategory->grid(
		-in => $root,
		-column => '2',
		-row => '4',
		-sticky => 'w'
	);
	$label_5->grid(
		-in => $root,
		-column => '1',
		-row => '5',
		-sticky => 'e'
	);
	$label_13->grid(
		-in => $root,
		-column => '1',
		-row => '6',
		-sticky => 'e'
	);
	$rbPreset->grid(
		-in => $root,
		-column => '2',
		-row => '6',
		-sticky => 'w'
	);
	$rbOpen->grid(
		-in => $root,
		-column => '2',
		-row => '7',
		-sticky => 'w'
	);
	$rbOpenNeg->grid(
		-in => $root,
		-column => '2',
		-row => '8',
		-sticky => 'w'
	);
	$cbTrackQty->grid(
		-in => $root,
		-column => '1',
		-row => '9',
		-columnspan => '2'
	);
	$label_14->grid(
		-in => $frame_3,
		-column => '1',
		-row => '1'
	);
	$label_15->grid(
		-in => $frame_3,
		-column => '2',
		-row => '1'
	);
	$label_16->grid(
		-in => $frame_3,
		-column => '3',
		-row => '1'
	);
	$label_17->grid(
		-in => $frame_3,
		-column => '4',
		-row => '1'
	);
	$label_18->grid(
		-in => $frame_3,
		-column => '5',
		-row => '1'
	);
	$label_19->grid(
		-in => $root,
		-column => '1',
		-row => '11',
		-sticky => 'e'
	);
	$entVendor->grid(
		-in => $root,
		-column => '2',
		-row => '11',
		-sticky => 'w'
	);
	$label_21->grid(
		-in => $root,
		-column => '1',
		-row => '12',
		-sticky => 'e'
	);
	$entCost->grid(
		-in => $root,
		-column => '2',
		-row => '12',
		-sticky => 'w'
	);
	$label_22->grid(
		-in => $root,
		-column => '1',
		-row => '13',
		-sticky => 'e'
	);
	$entReorderId->grid(
		-in => $root,
		-column => '2',
		-row => '13',
		-sticky => 'w'
	);
	$label_20->grid(
		-in => $root,
		-column => '1',
		-row => '14',
		-sticky => 'e'
	);
	$entExtended->grid(
		-in => $root,
		-column => '2',
		-row => '14',
		-sticky => 'w'
	);
	$entOnHand->grid(
		-in => $frame_3,
		-column => '1',
		-row => '2'
	);
	$entMinimum->grid(
		-in => $frame_3,
		-column => '2',
		-row => '2'
	);
	$entReorder->grid(
		-in => $frame_3,
		-column => '3',
		-row => '2'
	);
	$entCaseQty->grid(
		-in => $frame_3,
		-column => '4',
		-row => '2'
	);
	$entCaseId->grid(
		-in => $frame_3,
		-column => '5',
		-row => '2'
	);
	$bProcess->grid(
		-in => $frame_1,
		-column => '1',
		-row => '1'
	);
	$bSearch->grid(
		-in => $frame_1,
		-column => '2',
		-row => '1'
	);
	$bNew->grid(
		-in => $frame_1,
		-column => '3',
		-row => '1'
	);
	$bRemove->grid(
		-in => $frame_1,
		-column => '4',
		-row => '1'
	);
	$bQuit->grid(
		-in => $frame_1,
		-column => '5',
		-row => '1'
	);

	# Resize behavior management

	# container $frame_3 (rows)
	$frame_3->gridRowconfigure(1, -weight  => 0, -minsize  => 30);
	$frame_3->gridRowconfigure(2, -weight  => 0, -minsize  => 30);

	# container $frame_3 (columns)
	$frame_3->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$frame_3->gridColumnconfigure(2, -weight => 0, -minsize => 30);
	$frame_3->gridColumnconfigure(3, -weight => 0, -minsize => 30);
	$frame_3->gridColumnconfigure(4, -weight => 0, -minsize => 30);
	$frame_3->gridColumnconfigure(5, -weight => 0, -minsize => 30);

	# container $root (rows)
	$root->gridRowconfigure(1, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(2, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(3, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(4, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(5, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(6, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(7, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(8, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(9, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(10, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(11, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(12, -weight  => 0, -minsize  => 30);

	# container $root (columns)
	$root->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(2, -weight => 0, -minsize => 30);

	# container $frame_1 (rows)
	$frame_1->gridRowconfigure(1, -weight  => 0, -minsize  => 30);

	# container $frame_1 (columns)
	$frame_1->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(2, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(3, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(4, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(5, -weight => 0, -minsize => 30);

	# additional interface code
	$entId->bind('<Return>', sub{
	    &askToSave unless $isSaved;
	    unless($prod->open($prod->{'id'}))
	    {
		$isSaved = 1; #to trick newRec()
#		&newRec;
		shift->focusNext()->focus();
	    }
	    else
	    {
		
		qtyUpdate();
		#fixup extended
		$ext = $prod->deParseExt($prod->{'extended'});
		unless($prod->{'type'} eq 'p')
		{
		    $entPrice->configure(-state => 'disabled');
		    $entPrice->configure(-background => $disabledColor);
		}
		else
		{
		    $entPrice->configure(-state => 'normal');
		    $entPrice->configure(-background => $normalColor);
		}
		$frmTaxes->updateButtons;
		$isSaved = 1;
		shift->focusNext()->focus();
	    }
	});
	# end additional interface code
}


products_ui $top;
#this is to trick newRec() into not asking "save?"
$isSaved = 1;
&newRec;
Tk::MainLoop;

1;
