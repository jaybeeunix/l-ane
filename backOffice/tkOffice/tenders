#!/usr/bin/perl -w

#tkOffice/tenders
#Copyright 2001-2005 Jason Burrell

#This is the tenders back office program for L'anePOS
#$Id: tenders 1198 2010-10-24 18:26:03Z jason $

BEGIN {
    use FindBin;
    use File::Spec;
    $ENV{'LaneRoot'} = File::Spec->catdir($FindBin::Bin, File::Spec->updir, File::Spec->updir); #use the correct number of updirs
    require File::Spec->catfile($ENV{'LaneRoot'}, 'config', 'init.pl');
}

#lane stuff
use LanePOS::Tender;
$tend = new Tender;
use LanePOS::Locale; #ooh, we're heading for i18n now!
$lc = new Locale;

$isSaved = 1;

# Sample SpecTcl main program for testing GUI
use Tk;
my($top) = MainWindow->new();
$top->title("L'ane: " . $lc->get('Lane/BackOffice/Tenders'));

$top->bind(Tk::Entry, '<KeyRelease>', sub { # turns off $isSaved if the user types something
    #it wouldn't do anything when i bound to <Key> or <KeyPress>. don't know why
    $isSaved = 0;
});

#############################################################
# general use subs
#############################################################
sub askToSave {			# rtns f-0 if 'Discard/No', t-1 if 'Saved/Yes'
    #prompt w/a popup window:
    # "This record is not saved. Do you want a chance to save your changes?"
    # Yes (chance to save) -  No (discard)

    #askToSave doesn't work how it should
    #so, i've disabled it
    return 0;

}

sub newRec {
    unless($isSaved)
    {
	if(&askToSave)		# ask user if he/she wants to save
	{
	    #the user wants to save the file first
	    return;
	}
    }
    #either user didn't want to save, or it was already saved

    #clear the flds
    $tend->{'id'} = $tend->{'descr'} = '';
    $tend->{'allowZero'} = $tend->{'allowNeg'} = $tend->{'allowPos'} = $tend->{'allowChange'} = $tend->{'mandatoryAmt'} = $tend->{'openDrawer'} = $tend->{'pays'} = $tend->{'eprocess'} = $tend->{'eauth'} = 1;
    $tend->{'requireItems'} = 'a';

    $isSaved = 1;
    #move to the default fld
    $entId->focus;
}

sub validateInt {
    my ($new, $chars, $curr, $ndx, $type) = @_;

    #allow the fld to be blank
    return 1 if length($new) == 0;
    return 1 if int($new) eq $new; #i want this string comparison
    return 0;
}

sub validateStr {
    my ($len, $new, $chars, $curr, $ndx, $type) = @_;

    return 1 if length($new) <= $len;
    return 0;
}

# interface generated by SpecTcl (Perl enabled) version 1.1 
# from /burrell/LanePOS/backOffice/tkOffice/ui.files/tenders.ui
# For use with Tk402.002, using the grid geometry manager

sub tenders_ui {
	my($root) = @_;

	# widget creation 

	my($frame_1) = $root->Frame (
	);
	my($frmRequireItems) = $root->Frame (
	);
	my($label_1) = $root->Label (
		-text => $lc->get('Lane/GenericObject/ID'),
	);
	$entId = $root->Entry (
			       -justify => 'right',
			       -textvariable => \$tend->{'id'},
			       -width => '4',
			       -validate => 'key',
			       -vcmd => \&validateInt,
			       -invcmd => sub { $root->bell(); },
			       );
	my($label_2) = $root->Label (
		-text => $lc->get('Lane/Tender/Description'),
	);
	my($entDescr) = $root->Entry (
				      -textvariable => \$tend->{'descr'},
				      -width => '12',
				      -validate => 'key',
				      -vcmd => sub {&validateStr(10,@_);},
				      -invcmd => sub { $root->bell(); },
				      );
	my($cbAllowChange) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/Allow Change'),
		-variable => \$tend->{'allowChange'},
	);
	my($cbMandatoryAmt) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/Mandatory Amount'),
		-variable => \$tend->{'mandatoryAmt'},
	);
	my($cbOpenDrawer) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/Open Drawer'),
		-variable => \$tend->{'openDrawer'},
	);
	my($cbPays) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/Pays'),
		-variable => \$tend->{'pays'},
	);
	my($cbEprocess) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/eProcess'),
		-variable => \$tend->{'eprocess'},
	);
	my($cbEauth) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/eAuthorize'),
		-variable => \$tend->{'eauth'},
	);
	my($cbAllowZero) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/Allow Zero Amounts'),
		-variable => \$tend->{'allowZero'},
	);
	my($cbAllowNeg) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/Allow Negative Amounts'),
		-variable => \$tend->{'allowNeg'},
	);
	my($cbAllowPos) = $root->Checkbutton (
		-offvalue => 0,
		-onvalue => 1,
		-text => $lc->get('Lane/Tender/Allow Positive Amounts'),
		-variable => \$tend->{'allowPos'},
	);
	my($rbRequireItems) = $root->Radiobutton (
		-value => 'r',
		-text => $lc->get('Lane/Tender/Require Items/Require Items'),
		-variable => \$tend->{'requireItems'},
	);
	my($rbDontAllow) = $root->Radiobutton (
		-value => 'd',
		-text => $lc->get('Lane/Tender/Require Items/Do Not Allow Items'),
		-variable => \$tend->{'requireItems'},
	);
	my($rbEither) = $root->Radiobutton (
		-value => 'a',
		-text => $lc->get('Lane/Tender/Require Items/Either'),
		-variable => \$tend->{'requireItems'},
	);
	my($bProcess) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Process'),
	);
	my($bNew) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/New'),
	);
	my($bRemove) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Remove'),
	);
	my($bQuit) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Quit'),
	);

	# widget commands
	$bProcess->configure(
		-command => sub {
		    return if($tend->{'id'} eq '' or $tend->{'descr'} eq '');
		    $tend->save;
		    $isSaved = 1;
		    &newRec;
		}
	);
	$bNew->configure(
		-command => sub {&newRec;}
	);
	$bRemove->configure(
		-command => sub {
		    require Tk::DialogBox;
		    my $yes = $lc->get('Lane/BackOffice/Buttons/Yes, Remove');
		    my $popupWin = $top->DialogBox(
						   -title => $lc->get('Lane/BackOffice/Confirmation'),
						   -buttons => [$lc->get('Lane/BackOffice/Buttons/No, Cancel'), $yes]
						   );
		    $popupWin->add(Label, -text => $lc->get('Lane/BackOffice/Remove Prompt'))->pack();
		    $popupWin->add(Label, -text => "[$tend->{'id'}, $tend->{'descr'}]")->pack();
		    
		    if($popupWin->Show eq $yes)
		    {
			$popupWin->destroy;
			$tend->remove;
			$isSaved = 1; # to trick newRec
			&newRec;
		    }
		    else
		    {
			$popupWin->destroy;
		    }
		    
		}
	);
		    
	$bQuit->configure(
		-command => sub {
		    if($isSaved)
		    {
			exit;
		    }
		    if(&askToSave)
		    {
			return; # user wants a chance to save
		    }
		    exit; #discard selected
		}
	);

	# Geometry management

	$frame_1->grid(
		-in => $root,
		-column => '1',
		-row => '13',
		-columnspan => '2',
		-sticky => 'e'
	);
	$label_1->grid(
		-in => $root,
		-column => '1',
		-row => '1',
		-sticky => 'e'
	);
	$entId->grid(
		-in => $root,
		-column => '2',
		-row => '1',
		-sticky => 'w'
	);
	$label_2->grid(
		-in => $root,
		-column => '1',
		-row => '2',
		-sticky => 'e'
	);
	$entDescr->grid(
		-in => $root,
		-column => '2',
		-row => '2',
		-sticky => 'w'
	);
	$cbAllowChange->grid(
		-in => $root,
		-column => '1',
		-row => '3',
		-columnspan => '2'
	);
	$cbMandatoryAmt->grid(
		-in => $root,
		-column => '1',
		-row => '4',
		-columnspan => '2'
	);
	$cbOpenDrawer->grid(
		-in => $root,
		-column => '1',
		-row => '5',
		-columnspan => '2'
	);
	$cbPays->grid(
		-in => $root,
		-column => '1',
		-row => '6',
		-columnspan => '2'
	);
	$cbEprocess->grid(
		-in => $root,
		-column => '1',
		-row => '7',
		-columnspan => '2'
	);
	$cbEauth->grid(
		-in => $root,
		-column => '1',
		-row => '8',
		-columnspan => '2'
	);
	$cbAllowZero->grid(
		-in => $root,
		-column => '1',
		-row => '9',
		-columnspan => '2'
	);
	$cbAllowNeg->grid(
		-in => $root,
		-column => '1',
		-row => '10',
		-columnspan => '2'
	);
	$cbAllowPos->grid(
		-in => $root,
		-column => '1',
		-row => '11',
		-columnspan => '2'
	);
	$frmRequireItems->grid(
		-in => $root,
		-column => '1',
		-row => '12',
		-columnspan => '2'
	);

	#frame_1's kids
	$bProcess->grid(
		-in => $frame_1,
		-column => '1',
		-row => '1'
	);
	$bNew->grid(
		-in => $frame_1,
		-column => '2',
		-row => '1'
	);
	$bRemove->grid(
		-in => $frame_1,
		-column => '3',
		-row => '1'
	);
	$bQuit->grid(
		-in => $frame_1,
		-column => '4',
		-row => '1'
	);

	#frmRequireItems' kids
	$rbRequireItems->grid(
		-in => $frmRequireItems,
		-column => '1',
		-row => '1'
	);
	$rbDontAllow->grid(
		-in => $frmRequireItems,
		-column => '1',
		-row => '2'
	);
	$rbEither->grid(
		-in => $frmRequireItems,
		-column => '1',
		-row => '3'
	);

	# Resize behavior management

	# container $root (rows)
	$root->gridRowconfigure(1, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(2, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(3, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(4, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(5, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(6, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(7, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(8, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(9, -weight  => 0, -minsize  => 30);

	# container $root (columns)
	$root->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(2, -weight => 0, -minsize => 30);

	# container $frame_1 (rows)
	$frame_1->gridRowconfigure(1, -weight  => 0, -minsize  => 30);

	# container $frame_1 (columns)
	$frame_1->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(2, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(3, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(4, -weight => 0, -minsize => 30);

	# additional interface code
	$entId->bind('<Return>', sub{
	    &askToSave unless $isSaved;
	    unless($tend->open($tend->{'id'}))
	    {
		$isSaved = 1; #to trick newRec()
		&newRec;
		$entId->focus();
	    }
	    else
	    {
		$isSaved = 1;
		shift->focusNext()->focus();
	    }
	});

	# end additional interface code
}

tenders_ui $top;
#this is to trick newRec() into not asking "save?"
$isSaved = 1;
&newRec;
Tk::MainLoop;

1;
