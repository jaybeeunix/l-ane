#!/usr/bin/perl -w

#LaneBMS/programs/terms
#Copyright 2003-2010 Jason Burrell
#Copyright 2000-2002 Burrell Business Systems

#this is the terms program
#SpecPerl portions included
#$Id: terms 1193 2010-10-22 21:10:11Z jason $

BEGIN {
    use FindBin;
    use File::Spec;
    $ENV{'LaneRoot'} = File::Spec->catdir($FindBin::Bin, File::Spec->updir, File::Spec->updir); #use the correct number of updirs
    require File::Spec->catfile($ENV{'LaneRoot'}, 'config', 'init.pl');
}

#lbms
use LanePOS::Term;
use LanePOS::Locale; #ooh, we're heading for i18n now!
$lc = new Locale;

$term = new Term;

#specPerl
use Tk;
require Tk::Menu;
my($top) = MainWindow->new();
$top->title("L'ane: " . $lc->get('Lane/BackOffice/Terms'));


$isNew = 0;			# so open doesn't clobber new terms

#my subs
sub bNew_clk {
    $term->{'id'} = $term->{'descr'} = $term->{'dueDays'} = $term->{'finRate'} = $term->{'discDays'} = $term->{'discRate'} = $term->{'creator'} = $term->{'creationDate'} = '';
    $isNew = 1;
    #do i need to mark the other as gone?
}

sub bProcess_clk {
   $term->save;
   $isNew = 0;
}

sub bRemove_clk {
    $term->remove;
    #where should i put myself?
    &bNew_clk;
    $isNew = 0;			# this allows one to open records
}

sub verifyNumb {		# returns the numb portion
    my $numb = shift;
    my $tmp;

    $numb =~ s/[^\.\d]//g;
    $tmp = $numb;
    $tmp =~ s/\.//;
    if($tmp =~ m/\./) {
	return 0;
    }
    return $numb;
}

# interface generated by SpecTcl (Perl enabled) version 1.1 
# from terms.ui
# For use with Tk402.002, using the grid geometry manager
sub terms_ui {
	my($root) = @_;

	# widget creation 

	my($frame_1) = $root->Frame (
	);
	my($label_1) = $root->Label (
		-text => $lc->get('Lane/GenericObject/ID'),
	);
	my($entId) = $root->Entry (
		-textvariable => \$term->{'id'},
		-width => '5',
	);
	my($label_2) = $root->Label (
		-text => $lc->get('Lane/Term/Description'),
	);
	my($entDescr) = $root->Entry (
		-textvariable => \$term->{'descr'},
	);
	my($label_3) = $root->Label (
				     -anchor => 'e',
				     -text => $lc->get('Lane/Term/Days Until Due'),
				     );
	my($entDueDays) = $root->Entry (
		-textvariable => \$term->{'dueDays'},
		-width => '5',
	);
	my($label_4) = $root->Label (
		-text => $lc->get('Lane/Term/Finance Rate'),
	);
	my($entFinRate) = $root->Entry (
		-textvariable => \$term->{'finRate'},
		-width => '7',
	);
	my($label_5) = $root->Label (
		-text => $lc->get('Lane/Term/Days For Discount'),
	);
	my($entDiscDays) = $root->Entry (
		-textvariable => \$term->{'discDays'},
		-width => '5',
	);
	my($label_6) = $root->Label (
		-text => $lc->get('Lane/Term/Discount Rate'),
	);
	my($entDiscRate) = $root->Entry (
		-textvariable => \$term->{'discRate'},
		-width => '7',
	);
	my($button_1) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/New'),
	);
	my($button_2) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Process'),
	);
	my($button_3) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Remove'),
	);
	my($button_4) = $root->Button (
		-text => $lc->get('Lane/BackOffice/Buttons/Quit'),
	);

	# widget commands

	$button_1->configure(
			     -command => sub {&bNew_clk; $entId->focus;}
	);
	$button_2->configure(
			     -command => sub {&bProcess_clk; $entId->focus;}
	);
	$button_3->configure(
			     -command => sub {&bRemove_clk; $entId->focus;}
	);
	$button_4->configure(
			     -command => sub {exit;}
	);

	# Geometry management

	$frame_1->grid(
		-in => $root,
		-column => '1',
		-row => '7',
		-columnspan => '2'
	);
	$label_1->grid(
		-in => $root,
		-column => '1',
		-row => '1',
		-sticky => 'e'
	);
	$entId->grid(
		-in => $root,
		-column => '2',
		-row => '1',
		-sticky => 'w'
	);
	$label_2->grid(
		-in => $root,
		-column => '1',
		-row => '2',
		-sticky => 'e'
	);
	$entDescr->grid(
		-in => $root,
		-column => '2',
		-row => '2',
		-sticky => 'w'
	);
	$label_3->grid(
		-in => $root,
		-column => '1',
		-row => '3',
		-sticky => 'e'
	);
	$entDueDays->grid(
		-in => $root,
		-column => '2',
		-row => '3',
		-sticky => 'w'
	);
	$label_4->grid(
		-in => $root,
		-column => '1',
		-row => '4',
		-sticky => 'e'
	);
	$entFinRate->grid(
		-in => $root,
		-column => '2',
		-row => '4',
		-sticky => 'w'
	);
	$label_5->grid(
		-in => $root,
		-column => '1',
		-row => '5',
		-sticky => 'e'
	);
	$entDiscDays->grid(
		-in => $root,
		-column => '2',
		-row => '5',
		-sticky => 'w'
	);
	$label_6->grid(
		-in => $root,
		-column => '1',
		-row => '6',
		-sticky => 'e'
	);
	$entDiscRate->grid(
		-in => $root,
		-column => '2',
		-row => '6',
		-sticky => 'w'
	);
	$button_1->grid(
		-in => $frame_1,
		-column => '1',
		-row => '1'
	);
	$button_2->grid(
		-in => $frame_1,
		-column => '2',
		-row => '1'
	);
	$button_3->grid(
		-in => $frame_1,
		-column => '3',
		-row => '1'
	);
	$button_4->grid(
		-in => $frame_1,
		-column => '4',
		-row => '1'
	);

	# Resize behavior management

	# container $root (rows)
	$root->gridRowconfigure(1, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(2, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(3, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(4, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(5, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(6, -weight  => 0, -minsize  => 30);
	$root->gridRowconfigure(7, -weight  => 0, -minsize  => 30);

	# container $root (columns)
	$root->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$root->gridColumnconfigure(2, -weight => 0, -minsize => 30);

	# container $frame_1 (rows)
	$frame_1->gridRowconfigure(1, -weight  => 0, -minsize  => 30);

	# container $frame_1 (columns)
	$frame_1->gridColumnconfigure(1, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(2, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(3, -weight => 0, -minsize => 30);
	$frame_1->gridColumnconfigure(4, -weight => 0, -minsize => 30);

# additional interface code (by jbb)
  #events
	# make sure the values are within range
	$entId->bind('<FocusOut>', sub {
	    $term->{'id'} = sprintf "%.5s", $term->{'id'};
	    unless($isNew) {
		$term->open($term->{'id'});
	    }
	});
	$entDescr->bind('<FocusOut>', sub {$term->{'descr'} = sprintf "%.20s", $term->{'descr'};});
	$entDueDays->bind('<FocusOut>', sub { $term->{'dueDays'} = sprintf "%.0f", &verifyNumb($term->{'dueDays'}); });
	$entFinRate->bind('<FocusOut>', sub {$term->{'finRate'} = sprintf "%.4f", &verifyNumb($term->{'finRate'})});
	$entDiscDays->bind('<FocusOut>', sub {$term->{'discDays'} = sprintf "%.0f", &verifyNumb($term->{'discDays'})});
	$entDiscRate->bind('<FocusOut>', sub {$term->{'discRate'} = sprintf "%.4f", &verifyNumb($term->{'discRate'})});

# end additional interface code
}
terms_ui $top;
Tk::MainLoop;

1;



